{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prath\\\\Desktop\\\\infoviz\\\\project\\\\src\\\\visualizations\\\\UrbanNetworkGraph.js\",\n  _s = $RefreshSig$();\n// src/visualizations/UrbanNetworkGraph.js\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UrbanNetworkGraph = () => {\n  _s();\n  const svgRef = useRef(null);\n  const [period, setPeriod] = useState('current'); // 'pre-covid', 'covid', 'recovery', 'current'\n  const [correlationData, setCorrelationData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        // Fetch correlation data from your API\n        const response = await fetch(`/api/urban-correlations?period=${period}`);\n        const data = await response.json();\n        setCorrelationData(data);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching correlation data:', error);\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [period]);\n  useEffect(() => {\n    if (!correlationData || loading) return;\n\n    // Clear previous visualization\n    d3.select(svgRef.current).selectAll('*').remove();\n\n    // Setup SVG\n    const width = svgRef.current.clientWidth;\n    const height = svgRef.current.clientHeight;\n    const svg = d3.select(svgRef.current).attr('width', width).attr('height', height);\n\n    // Process data for visualization\n    const {\n      nodes,\n      links\n    } = correlationData;\n\n    // Color scale for node categories\n    const colorScale = d3.scaleOrdinal().domain(['borough', 'transportation', 'complaint', 'weather']).range(['#6baed6', '#fd8d3c', '#74c476', '#9e9ac8']);\n\n    // Size scale for node importance\n    const sizeScale = d3.scaleLinear().domain([0, d3.max(nodes, d => d.weight || 1)]).range([5, 15]);\n\n    // Create a force simulation\n    const simulation = d3.forceSimulation(nodes).force('link', d3.forceLink(links).id(d => d.id).distance(d => 100 / (d.value + 0.1))).force('charge', d3.forceManyBody().strength(-100)).force('center', d3.forceCenter(width / 2, height / 2)).force('collision', d3.forceCollide().radius(d => sizeScale(d.weight || 1) + 10));\n\n    // Create a group for all elements\n    const g = svg.append('g');\n\n    // Add zoom behavior\n    svg.call(d3.zoom().extent([[0, 0], [width, height]]).scaleExtent([0.1, 8]).on('zoom', event => {\n      g.attr('transform', event.transform);\n    }));\n\n    // Create links\n    const link = g.append('g').selectAll('line').data(links).enter().append('line').attr('stroke-width', d => Math.abs(d.value) * 2).attr('stroke', d => d.value >= 0 ? '#999' : '#f44336').attr('stroke-dasharray', d => d.value >= 0 ? '0' : '3,3').attr('opacity', d => Math.abs(d.value) * 0.8 + 0.2);\n\n    // Create node groups\n    const node = g.append('g').selectAll('.node').data(nodes).enter().append('g').attr('class', 'node').call(d3.drag().on('start', dragstarted).on('drag', dragged).on('end', dragended));\n\n    // Add circles to node groups\n    node.append('circle').attr('r', d => sizeScale(d.weight || 1)).attr('fill', d => colorScale(d.category)).attr('stroke', '#fff').attr('stroke-width', 1.5);\n\n    // Add labels to node groups\n    node.append('text').attr('dx', d => sizeScale(d.weight || 1) + 5).attr('dy', '.35em').text(d => d.name).style('font-size', '10px').style('fill', '#333');\n\n    // Add tooltips\n    node.append('title').text(d => `${d.name}\\nType: ${d.category}\\nWeight: ${d.weight || 1}`);\n\n    // Add tooltips to links\n    link.append('title').text(d => `${d.source.name} â†’ ${d.target.name}\\nCorrelation: ${d.value.toFixed(2)}`);\n\n    // Update positions on each tick\n    simulation.on('tick', () => {\n      link.attr('x1', d => d.source.x).attr('y1', d => d.source.y).attr('x2', d => d.target.x).attr('y2', d => d.target.y);\n      node.attr('transform', d => `translate(${d.x},${d.y})`);\n    });\n\n    // Drag functions\n    function dragstarted(event, d) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    }\n    function dragged(event, d) {\n      d.fx = event.x;\n      d.fy = event.y;\n    }\n    function dragended(event, d) {\n      if (!event.active) simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    }\n\n    // Legend\n    const legend = svg.append('g').attr('class', 'legend').attr('transform', `translate(20, 20)`);\n    const categories = ['borough', 'transportation', 'complaint', 'weather'];\n    const legendItems = legend.selectAll('.legend-item').data(categories).enter().append('g').attr('class', 'legend-item').attr('transform', (d, i) => `translate(0, ${i * 20})`);\n    legendItems.append('circle').attr('r', 6).attr('fill', d => colorScale(d));\n    legendItems.append('text').attr('x', 15).attr('y', 4).text(d => d.charAt(0).toUpperCase() + d.slice(1)).style('font-size', '12px');\n\n    // Correlation strength legend\n    const corrLegend = svg.append('g').attr('class', 'corr-legend').attr('transform', `translate(20, ${height - 80})`);\n    corrLegend.append('text').attr('y', -10).text('Correlation Strength:').style('font-size', '12px');\n\n    // Positive correlation\n    corrLegend.append('line').attr('x1', 0).attr('y1', 10).attr('x2', 30).attr('y2', 10).attr('stroke', '#999').attr('stroke-width', 3);\n    corrLegend.append('text').attr('x', 35).attr('y', 14).text('Positive').style('font-size', '10px');\n\n    // Negative correlation\n    corrLegend.append('line').attr('x1', 0).attr('y1', 30).attr('x2', 30).attr('y2', 30).attr('stroke', '#f44336').attr('stroke-width', 3).attr('stroke-dasharray', '3,3');\n    corrLegend.append('text').attr('x', 35).attr('y', 34).text('Negative').style('font-size', '10px');\n  }, [correlationData, loading]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"urban-network-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Time Period\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: period === 'pre-covid' ? 'active' : '',\n          onClick: () => setPeriod('pre-covid'),\n          children: \"Pre-COVID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: period === 'covid' ? 'active' : '',\n          onClick: () => setPeriod('covid'),\n          children: \"During COVID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: period === 'recovery' ? 'active' : '',\n          onClick: () => setPeriod('recovery'),\n          children: \"Recovery\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: period === 'current' ? 'active' : '',\n          onClick: () => setPeriod('current'),\n          children: \"Current\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading correlation data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      width: \"100%\",\n      height: \"600\",\n      style: {\n        border: '1px solid #ddd',\n        borderRadius: '4px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"description\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Understanding the Urban Network\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This visualization shows how different urban systems correlate with each other. Nodes represent boroughs, transportation modes, complaint types, and weather factors. Links represent relationships between them - solid lines show positive correlations, while dashed red lines show negative correlations. Stronger correlations have thicker lines.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Try dragging nodes to explore the network and use the mouse wheel to zoom in and out. Toggle between time periods to see how relationships changed before, during, and after COVID-19.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 5\n  }, this);\n};\n_s(UrbanNetworkGraph, \"bPrSVfwf+59QzrpBnk5lJYMIzYY=\");\n_c = UrbanNetworkGraph;\nexport default UrbanNetworkGraph;\nvar _c;\n$RefreshReg$(_c, \"UrbanNetworkGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsxDEV","_jsxDEV","UrbanNetworkGraph","_s","svgRef","period","setPeriod","correlationData","setCorrelationData","loading","setLoading","fetchData","response","fetch","data","json","error","console","select","current","selectAll","remove","width","clientWidth","height","clientHeight","svg","attr","nodes","links","colorScale","scaleOrdinal","domain","range","sizeScale","scaleLinear","max","d","weight","simulation","forceSimulation","force","forceLink","id","distance","value","forceManyBody","strength","forceCenter","forceCollide","radius","g","append","call","zoom","extent","scaleExtent","on","event","transform","link","enter","Math","abs","node","drag","dragstarted","dragged","dragended","category","text","name","style","source","target","toFixed","x","y","active","alphaTarget","restart","fx","fy","legend","categories","legendItems","i","charAt","toUpperCase","slice","corrLegend","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","border","borderRadius","_c","$RefreshReg$"],"sources":["C:/Users/prath/Desktop/infoviz/project/src/visualizations/UrbanNetworkGraph.js"],"sourcesContent":["// src/visualizations/UrbanNetworkGraph.js\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst UrbanNetworkGraph = () => {\r\n  const svgRef = useRef(null);\r\n  const [period, setPeriod] = useState('current'); // 'pre-covid', 'covid', 'recovery', 'current'\r\n  const [correlationData, setCorrelationData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  \r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        // Fetch correlation data from your API\r\n        const response = await fetch(`/api/urban-correlations?period=${period}`);\r\n        const data = await response.json();\r\n        setCorrelationData(data);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching correlation data:', error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchData();\r\n  }, [period]);\r\n  \r\n  useEffect(() => {\r\n    if (!correlationData || loading) return;\r\n    \r\n    // Clear previous visualization\r\n    d3.select(svgRef.current).selectAll('*').remove();\r\n    \r\n    // Setup SVG\r\n    const width = svgRef.current.clientWidth;\r\n    const height = svgRef.current.clientHeight;\r\n    const svg = d3.select(svgRef.current)\r\n      .attr('width', width)\r\n      .attr('height', height);\r\n    \r\n    // Process data for visualization\r\n    const { nodes, links } = correlationData;\r\n    \r\n    // Color scale for node categories\r\n    const colorScale = d3.scaleOrdinal()\r\n      .domain(['borough', 'transportation', 'complaint', 'weather'])\r\n      .range(['#6baed6', '#fd8d3c', '#74c476', '#9e9ac8']);\r\n    \r\n    // Size scale for node importance\r\n    const sizeScale = d3.scaleLinear()\r\n      .domain([0, d3.max(nodes, d => d.weight || 1)])\r\n      .range([5, 15]);\r\n    \r\n    // Create a force simulation\r\n    const simulation = d3.forceSimulation(nodes)\r\n      .force('link', d3.forceLink(links).id(d => d.id).distance(d => 100 / (d.value + 0.1)))\r\n      .force('charge', d3.forceManyBody().strength(-100))\r\n      .force('center', d3.forceCenter(width / 2, height / 2))\r\n      .force('collision', d3.forceCollide().radius(d => sizeScale(d.weight || 1) + 10));\r\n    \r\n    // Create a group for all elements\r\n    const g = svg.append('g');\r\n    \r\n    // Add zoom behavior\r\n    svg.call(d3.zoom()\r\n      .extent([[0, 0], [width, height]])\r\n      .scaleExtent([0.1, 8])\r\n      .on('zoom', (event) => {\r\n        g.attr('transform', event.transform);\r\n      }));\r\n    \r\n    // Create links\r\n    const link = g.append('g')\r\n      .selectAll('line')\r\n      .data(links)\r\n      .enter()\r\n      .append('line')\r\n      .attr('stroke-width', d => Math.abs(d.value) * 2)\r\n      .attr('stroke', d => d.value >= 0 ? '#999' : '#f44336')\r\n      .attr('stroke-dasharray', d => d.value >= 0 ? '0' : '3,3')\r\n      .attr('opacity', d => Math.abs(d.value) * 0.8 + 0.2);\r\n    \r\n    // Create node groups\r\n    const node = g.append('g')\r\n      .selectAll('.node')\r\n      .data(nodes)\r\n      .enter()\r\n      .append('g')\r\n      .attr('class', 'node')\r\n      .call(d3.drag()\r\n        .on('start', dragstarted)\r\n        .on('drag', dragged)\r\n        .on('end', dragended));\r\n    \r\n    // Add circles to node groups\r\n    node.append('circle')\r\n      .attr('r', d => sizeScale(d.weight || 1))\r\n      .attr('fill', d => colorScale(d.category))\r\n      .attr('stroke', '#fff')\r\n      .attr('stroke-width', 1.5);\r\n    \r\n    // Add labels to node groups\r\n    node.append('text')\r\n      .attr('dx', d => sizeScale(d.weight || 1) + 5)\r\n      .attr('dy', '.35em')\r\n      .text(d => d.name)\r\n      .style('font-size', '10px')\r\n      .style('fill', '#333');\r\n    \r\n    // Add tooltips\r\n    node.append('title')\r\n      .text(d => `${d.name}\\nType: ${d.category}\\nWeight: ${d.weight || 1}`);\r\n    \r\n    // Add tooltips to links\r\n    link.append('title')\r\n      .text(d => `${d.source.name} â†’ ${d.target.name}\\nCorrelation: ${d.value.toFixed(2)}`);\r\n    \r\n    // Update positions on each tick\r\n    simulation.on('tick', () => {\r\n      link\r\n        .attr('x1', d => d.source.x)\r\n        .attr('y1', d => d.source.y)\r\n        .attr('x2', d => d.target.x)\r\n        .attr('y2', d => d.target.y);\r\n      \r\n      node\r\n        .attr('transform', d => `translate(${d.x},${d.y})`);\r\n    });\r\n    \r\n    // Drag functions\r\n    function dragstarted(event, d) {\r\n      if (!event.active) simulation.alphaTarget(0.3).restart();\r\n      d.fx = d.x;\r\n      d.fy = d.y;\r\n    }\r\n    \r\n    function dragged(event, d) {\r\n      d.fx = event.x;\r\n      d.fy = event.y;\r\n    }\r\n    \r\n    function dragended(event, d) {\r\n      if (!event.active) simulation.alphaTarget(0);\r\n      d.fx = null;\r\n      d.fy = null;\r\n    }\r\n    \r\n    // Legend\r\n    const legend = svg.append('g')\r\n      .attr('class', 'legend')\r\n      .attr('transform', `translate(20, 20)`);\r\n    \r\n    const categories = ['borough', 'transportation', 'complaint', 'weather'];\r\n    const legendItems = legend.selectAll('.legend-item')\r\n      .data(categories)\r\n      .enter()\r\n      .append('g')\r\n      .attr('class', 'legend-item')\r\n      .attr('transform', (d, i) => `translate(0, ${i * 20})`);\r\n    \r\n    legendItems.append('circle')\r\n      .attr('r', 6)\r\n      .attr('fill', d => colorScale(d));\r\n    \r\n    legendItems.append('text')\r\n      .attr('x', 15)\r\n      .attr('y', 4)\r\n      .text(d => d.charAt(0).toUpperCase() + d.slice(1))\r\n      .style('font-size', '12px');\r\n    \r\n    // Correlation strength legend\r\n    const corrLegend = svg.append('g')\r\n      .attr('class', 'corr-legend')\r\n      .attr('transform', `translate(20, ${height - 80})`);\r\n    \r\n    corrLegend.append('text')\r\n      .attr('y', -10)\r\n      .text('Correlation Strength:')\r\n      .style('font-size', '12px');\r\n    \r\n    // Positive correlation\r\n    corrLegend.append('line')\r\n      .attr('x1', 0)\r\n      .attr('y1', 10)\r\n      .attr('x2', 30)\r\n      .attr('y2', 10)\r\n      .attr('stroke', '#999')\r\n      .attr('stroke-width', 3);\r\n    \r\n    corrLegend.append('text')\r\n      .attr('x', 35)\r\n      .attr('y', 14)\r\n      .text('Positive')\r\n      .style('font-size', '10px');\r\n    \r\n    // Negative correlation\r\n    corrLegend.append('line')\r\n      .attr('x1', 0)\r\n      .attr('y1', 30)\r\n      .attr('x2', 30)\r\n      .attr('y2', 30)\r\n      .attr('stroke', '#f44336')\r\n      .attr('stroke-width', 3)\r\n      .attr('stroke-dasharray', '3,3');\r\n    \r\n    corrLegend.append('text')\r\n      .attr('x', 35)\r\n      .attr('y', 34)\r\n      .text('Negative')\r\n      .style('font-size', '10px');\r\n    \r\n  }, [correlationData, loading]);\r\n  \r\n  return (\r\n    <div className=\"urban-network-container\">\r\n      <div className=\"controls\">\r\n        <h3>Time Period</h3>\r\n        <div className=\"button-group\">\r\n          <button \r\n            className={period === 'pre-covid' ? 'active' : ''} \r\n            onClick={() => setPeriod('pre-covid')}\r\n          >\r\n            Pre-COVID\r\n          </button>\r\n          <button \r\n            className={period === 'covid' ? 'active' : ''} \r\n            onClick={() => setPeriod('covid')}\r\n          >\r\n            During COVID\r\n          </button>\r\n          <button \r\n            className={period === 'recovery' ? 'active' : ''} \r\n            onClick={() => setPeriod('recovery')}\r\n          >\r\n            Recovery\r\n          </button>\r\n          <button \r\n            className={period === 'current' ? 'active' : ''} \r\n            onClick={() => setPeriod('current')}\r\n          >\r\n            Current\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      {loading ? (\r\n        <div className=\"loading\">Loading correlation data...</div>\r\n      ) : (\r\n        <svg \r\n          ref={svgRef} \r\n          width=\"100%\" \r\n          height=\"600\"\r\n          style={{ border: '1px solid #ddd', borderRadius: '4px' }}\r\n        ></svg>\r\n      )}\r\n      \r\n      <div className=\"description\">\r\n        <h3>Understanding the Urban Network</h3>\r\n        <p>\r\n          This visualization shows how different urban systems correlate with each other. \r\n          Nodes represent boroughs, transportation modes, complaint types, and weather factors.\r\n          Links represent relationships between them - solid lines show positive correlations,\r\n          while dashed red lines show negative correlations. Stronger correlations have thicker lines.\r\n        </p>\r\n        <p>\r\n          Try dragging nodes to explore the network and use the mouse wheel to zoom in and out.\r\n          Toggle between time periods to see how relationships changed before, during, and after COVID-19.\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UrbanNetworkGraph;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}