{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prath\\\\Desktop\\\\infoviz\\\\project\\\\src\\\\visualizations\\\\TemporalRhythmSpiral.js\",\n  _s = $RefreshSig$();\n// src/visualizations/TemporalRhythmSpiral.js\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TemporalRhythmSpiral = () => {\n  _s();\n  const svgRef = useRef(null);\n  const [dataType, setDataType] = useState('taxi'); // 'taxi', 'subway', '311'\n  const [timeUnit, setTimeUnit] = useState('daily'); // 'hourly', 'daily', 'monthly'\n  const [period, setPeriod] = useState('all'); // 'pre-covid', 'covid', 'recovery', 'current', 'all'\n  const [loading, setLoading] = useState(true);\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        // Fetch temporal data from the API\n        const response = await fetch(`/api/temporal-patterns?dataType=${dataType}&timeUnit=${timeUnit}&period=${period}`);\n        const responseData = await response.json();\n        setData(responseData);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching temporal data:', error);\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [dataType, timeUnit, period]);\n  useEffect(() => {\n    if (!data || loading) return;\n\n    // Clear previous visualization\n    d3.select(svgRef.current).selectAll('*').remove();\n\n    // Setup SVG\n    const width = svgRef.current.clientWidth;\n    const height = svgRef.current.clientHeight;\n    const margin = {\n      top: 50,\n      right: 50,\n      bottom: 50,\n      left: 50\n    };\n    const innerWidth = width - margin.left - margin.right;\n    const innerHeight = height - margin.top - margin.bottom;\n    const svg = d3.select(svgRef.current).attr('width', width).attr('height', height);\n    const g = svg.append('g').attr('transform', `translate(${width / 2}, ${height / 2})`);\n\n    // Define spiral parameters\n    const radius = Math.min(innerWidth, innerHeight) / 2;\n    const numPoints = data.length;\n    const spiralWidth = radius * 0.8;\n\n    // Calculate maximum value for normalization\n    const maxValue = d3.max(data, d => d.value);\n\n    // Spiral generator function\n    const spiral = (theta, thetaMax) => {\n      const r = spiralWidth * theta / thetaMax;\n      return r;\n    };\n\n    // Create a scale for color intensity based on data values\n    const colorScale = d3.scaleSequential().domain([0, maxValue]).interpolator(dataType === 'taxi' ? d3.interpolateOranges : dataType === 'subway' ? d3.interpolateBlues : d3.interpolateGreens);\n\n    // Create a spiral path\n    const lineGenerator = d3.lineRadial().angle((d, i) => i / numPoints * 2 * Math.PI * 3) // 3 complete turns\n    .radius((d, i) => spiral(i / numPoints * 2 * Math.PI * 3, 2 * Math.PI * 3));\n    const spiralPath = lineGenerator(Array(numPoints).fill(0));\n\n    // Draw the spiral guide\n    g.append('path').attr('d', spiralPath).attr('fill', 'none').attr('stroke', '#ccc').attr('stroke-width', 1).attr('opacity', 0.5);\n\n    // Get angle and radius for each data point\n    const points = data.map((d, i) => {\n      const angle = i / numPoints * 2 * Math.PI * 3;\n      const r = spiral(angle, 2 * Math.PI * 3);\n      return {\n        ...d,\n        angle,\n        r,\n        x: r * Math.cos(angle),\n        y: r * Math.sin(angle)\n      };\n    });\n\n    // Draw data points\n    g.selectAll('.data-point').data(points).enter().append('circle').attr('class', 'data-point').attr('cx', d => d.x).attr('cy', d => d.y).attr('r', 5).attr('fill', d => colorScale(d.value)).attr('stroke', '#fff').attr('stroke-width', 0.5).on('mouseover', function (event, d) {\n      d3.select(this).attr('r', 8).attr('stroke-width', 2);\n      tooltip.style('display', 'block').html(`\n            <strong>${formatTimeLabel(d.time, timeUnit)}</strong><br/>\n            Value: ${d.value.toLocaleString()}<br/>\n            ${getDataTypeLabel(dataType)}\n          `).style('left', event.pageX + 10 + 'px').style('top', event.pageY - 30 + 'px');\n    }).on('mouseout', function () {\n      d3.select(this).attr('r', 5).attr('stroke-width', 0.5);\n      tooltip.style('display', 'none');\n    });\n\n    // Add tooltip\n    const tooltip = d3.select('body').append('div').attr('class', 'tooltip').style('display', 'none').style('position', 'absolute').style('background', 'rgba(0, 0, 0, 0.7)').style('color', 'white').style('padding', '8px').style('border-radius', '4px').style('font-size', '12px').style('pointer-events', 'none');\n\n    // Add time labels\n    if (timeUnit === 'hourly') {\n      // Add hour labels at 6-hour intervals\n      [0, 6, 12, 18].forEach(hour => {\n        const hourIndex = points.findIndex(p => parseInt(p.time) === hour);\n        if (hourIndex >= 0) {\n          const point = points[hourIndex];\n          const labelRadius = point.r + 10;\n          g.append('text').attr('x', labelRadius * Math.cos(point.angle)).attr('y', labelRadius * Math.sin(point.angle)).attr('text-anchor', 'middle').attr('alignment-baseline', 'middle').attr('font-size', '10px').attr('fill', '#333').text(`${hour}:00`);\n        }\n      });\n    } else if (timeUnit === 'daily') {\n      // Add day labels for Monday and Friday\n      const dayLabels = ['Mon', 'Fri'];\n      [1, 5].forEach(day => {\n        const dayIndex = points.findIndex(p => parseInt(p.time) === day);\n        if (dayIndex >= 0) {\n          const point = points[dayIndex];\n          const labelRadius = point.r + 10;\n          g.append('text').attr('x', labelRadius * Math.cos(point.angle)).attr('y', labelRadius * Math.sin(point.angle)).attr('text-anchor', 'middle').attr('alignment-baseline', 'middle').attr('font-size', '10px').attr('fill', '#333').text(dayLabels[day === 1 ? 0 : 1]);\n        }\n      });\n    } else if (timeUnit === 'monthly') {\n      // Add month labels for January, April, July, and October\n      const monthLabels = ['Jan', 'Apr', 'Jul', 'Oct'];\n      [0, 3, 6, 9].forEach((month, i) => {\n        const monthIndex = points.findIndex(p => parseInt(p.time) === month);\n        if (monthIndex >= 0) {\n          const point = points[monthIndex];\n          const labelRadius = point.r + 10;\n          g.append('text').attr('x', labelRadius * Math.cos(point.angle)).attr('y', labelRadius * Math.sin(point.angle)).attr('text-anchor', 'middle').attr('alignment-baseline', 'middle').attr('font-size', '10px').attr('fill', '#333').text(monthLabels[i]);\n        }\n      });\n    }\n\n    // Add title\n    svg.append('text').attr('x', width / 2).attr('y', 20).attr('text-anchor', 'middle').attr('font-size', '16px').attr('font-weight', 'bold').text(`${getDataTypeLabel(dataType)} ${getTimeUnitLabel(timeUnit)} Patterns`);\n\n    // Add color legend\n    const legendWidth = 200;\n    const legendHeight = 15;\n    const legendX = width - margin.right - legendWidth;\n    const legendY = height - margin.bottom + 20;\n    const legendScale = d3.scaleLinear().domain([0, maxValue]).range([0, legendWidth]);\n    const legendAxis = d3.axisBottom(legendScale).ticks(5).tickFormat(d => d.toLocaleString());\n    for (let i = 0; i < legendWidth; i++) {\n      const value = legendScale.invert(i);\n      svg.append('rect').attr('x', legendX + i).attr('y', legendY).attr('width', 1).attr('height', legendHeight).attr('fill', colorScale(value));\n    }\n    svg.append('g').attr('transform', `translate(${legendX}, ${legendY + legendHeight})`).call(legendAxis).selectAll('text').attr('font-size', '10px');\n    svg.append('text').attr('x', legendX).attr('y', legendY - 5).attr('font-size', '12px').text('Activity Level');\n\n    // Add period indicator\n    if (period !== 'all') {\n      svg.append('text').attr('x', width / 2).attr('y', 40).attr('text-anchor', 'middle').attr('font-size', '14px').attr('font-style', 'italic').text(getPeriodLabel(period));\n    }\n\n    // Helper functions\n    function formatTimeLabel(time, unit) {\n      if (unit === 'hourly') {\n        return `${time}:00`;\n      } else if (unit === 'daily') {\n        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        return days[parseInt(time)];\n      } else if (unit === 'monthly') {\n        const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n        return months[parseInt(time)];\n      }\n      return time;\n    }\n    function getDataTypeLabel(type) {\n      switch (type) {\n        case 'taxi':\n          return 'Taxi Trips';\n        case 'subway':\n          return 'Subway Ridership';\n        case '311':\n          return '311 Service Calls';\n        default:\n          return type;\n      }\n    }\n    function getTimeUnitLabel(unit) {\n      switch (unit) {\n        case 'hourly':\n          return 'Hourly';\n        case 'daily':\n          return 'Daily';\n        case 'monthly':\n          return 'Monthly';\n        default:\n          return unit;\n      }\n    }\n    function getPeriodLabel(period) {\n      switch (period) {\n        case 'pre-covid':\n          return 'Pre-COVID (Before March 2020)';\n        case 'covid':\n          return 'During COVID (March 2020 - June 2021)';\n        case 'recovery':\n          return 'Recovery (June 2021 - December 2022)';\n        case 'current':\n          return 'Current (2023 onwards)';\n        case 'all':\n          return 'All Time Periods';\n        default:\n          return period;\n      }\n    }\n\n    // Cleanup\n    return () => {\n      d3.selectAll('.tooltip').remove();\n    };\n  }, [data, loading, dataType, timeUnit, period]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"temporal-rhythm-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Data Type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: dataType === 'taxi' ? 'active' : '',\n            onClick: () => setDataType('taxi'),\n            children: \"Taxi Trips\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: dataType === 'subway' ? 'active' : '',\n            onClick: () => setDataType('subway'),\n            children: \"Subway Ridership\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: dataType === '311' ? 'active' : '',\n            onClick: () => setDataType('311'),\n            children: \"311 Calls\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Time Unit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: timeUnit === 'hourly' ? 'active' : '',\n            onClick: () => setTimeUnit('hourly'),\n            children: \"Hourly\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: timeUnit === 'daily' ? 'active' : '',\n            onClick: () => setTimeUnit('daily'),\n            children: \"Daily\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: timeUnit === 'monthly' ? 'active' : '',\n            onClick: () => setTimeUnit('monthly'),\n            children: \"Monthly\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Time Period\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: period === 'all' ? 'active' : '',\n            onClick: () => setPeriod('all'),\n            children: \"All\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: period === 'pre-covid' ? 'active' : '',\n            onClick: () => setPeriod('pre-covid'),\n            children: \"Pre-COVID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: period === 'covid' ? 'active' : '',\n            onClick: () => setPeriod('covid'),\n            children: \"During COVID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: period === 'recovery' ? 'active' : '',\n            onClick: () => setPeriod('recovery'),\n            children: \"Recovery\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: period === 'current' ? 'active' : '',\n            onClick: () => setPeriod('current'),\n            children: \"Current\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading temporal data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      width: \"100%\",\n      height: \"700\",\n      style: {\n        border: '1px solid #ddd',\n        borderRadius: '4px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"description\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Understanding Temporal Rhythms\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This spiral visualization shows cyclical patterns in urban data over time. Each point represents a time unit (hour, day, or month), with color intensity indicating activity level. The spiral layout emphasizes repeating patterns while showing how they evolve over time.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Try switching between data types and time units to explore different rhythms in the city. Compare time periods to see how COVID-19 affected urban patterns and their recovery.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 318,\n    columnNumber: 5\n  }, this);\n};\n_s(TemporalRhythmSpiral, \"ilPfYitXhcG1n9y/5wNfLrfFBYY=\");\n_c = TemporalRhythmSpiral;\nexport default TemporalRhythmSpiral;\nvar _c;\n$RefreshReg$(_c, \"TemporalRhythmSpiral\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsxDEV","_jsxDEV","TemporalRhythmSpiral","_s","svgRef","dataType","setDataType","timeUnit","setTimeUnit","period","setPeriod","loading","setLoading","data","setData","fetchData","response","fetch","responseData","json","error","console","select","current","selectAll","remove","width","clientWidth","height","clientHeight","margin","top","right","bottom","left","innerWidth","innerHeight","svg","attr","g","append","radius","Math","min","numPoints","length","spiralWidth","maxValue","max","d","value","spiral","theta","thetaMax","r","colorScale","scaleSequential","domain","interpolator","interpolateOranges","interpolateBlues","interpolateGreens","lineGenerator","lineRadial","angle","i","PI","spiralPath","Array","fill","points","map","x","cos","y","sin","enter","on","event","tooltip","style","html","formatTimeLabel","time","toLocaleString","getDataTypeLabel","pageX","pageY","forEach","hour","hourIndex","findIndex","p","parseInt","point","labelRadius","text","dayLabels","day","dayIndex","monthLabels","month","monthIndex","getTimeUnitLabel","legendWidth","legendHeight","legendX","legendY","legendScale","scaleLinear","range","legendAxis","axisBottom","ticks","tickFormat","invert","call","getPeriodLabel","unit","days","months","type","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","border","borderRadius","_c","$RefreshReg$"],"sources":["C:/Users/prath/Desktop/infoviz/project/src/visualizations/TemporalRhythmSpiral.js"],"sourcesContent":["// src/visualizations/TemporalRhythmSpiral.js\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst TemporalRhythmSpiral = () => {\r\n  const svgRef = useRef(null);\r\n  const [dataType, setDataType] = useState('taxi'); // 'taxi', 'subway', '311'\r\n  const [timeUnit, setTimeUnit] = useState('daily'); // 'hourly', 'daily', 'monthly'\r\n  const [period, setPeriod] = useState('all'); // 'pre-covid', 'covid', 'recovery', 'current', 'all'\r\n  const [loading, setLoading] = useState(true);\r\n  const [data, setData] = useState(null);\r\n  \r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        // Fetch temporal data from the API\r\n        const response = await fetch(\r\n          `/api/temporal-patterns?dataType=${dataType}&timeUnit=${timeUnit}&period=${period}`\r\n        );\r\n        const responseData = await response.json();\r\n        setData(responseData);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching temporal data:', error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchData();\r\n  }, [dataType, timeUnit, period]);\r\n  \r\n  useEffect(() => {\r\n    if (!data || loading) return;\r\n    \r\n    // Clear previous visualization\r\n    d3.select(svgRef.current).selectAll('*').remove();\r\n    \r\n    // Setup SVG\r\n    const width = svgRef.current.clientWidth;\r\n    const height = svgRef.current.clientHeight;\r\n    const margin = { top: 50, right: 50, bottom: 50, left: 50 };\r\n    const innerWidth = width - margin.left - margin.right;\r\n    const innerHeight = height - margin.top - margin.bottom;\r\n    \r\n    const svg = d3.select(svgRef.current)\r\n      .attr('width', width)\r\n      .attr('height', height);\r\n    \r\n    const g = svg.append('g')\r\n      .attr('transform', `translate(${width / 2}, ${height / 2})`);\r\n    \r\n    // Define spiral parameters\r\n    const radius = Math.min(innerWidth, innerHeight) / 2;\r\n    const numPoints = data.length;\r\n    const spiralWidth = radius * 0.8;\r\n    \r\n    // Calculate maximum value for normalization\r\n    const maxValue = d3.max(data, d => d.value);\r\n    \r\n    // Spiral generator function\r\n    const spiral = (theta, thetaMax) => {\r\n      const r = spiralWidth * theta / thetaMax;\r\n      return r;\r\n    };\r\n    \r\n    // Create a scale for color intensity based on data values\r\n    const colorScale = d3.scaleSequential()\r\n      .domain([0, maxValue])\r\n      .interpolator(\r\n        dataType === 'taxi' ? d3.interpolateOranges :\r\n        dataType === 'subway' ? d3.interpolateBlues : \r\n        d3.interpolateGreens\r\n      );\r\n    \r\n    // Create a spiral path\r\n    const lineGenerator = d3.lineRadial()\r\n      .angle((d, i) => (i / numPoints) * 2 * Math.PI * 3) // 3 complete turns\r\n      .radius((d, i) => spiral((i / numPoints) * 2 * Math.PI * 3, 2 * Math.PI * 3));\r\n    \r\n    const spiralPath = lineGenerator(Array(numPoints).fill(0));\r\n    \r\n    // Draw the spiral guide\r\n    g.append('path')\r\n      .attr('d', spiralPath)\r\n      .attr('fill', 'none')\r\n      .attr('stroke', '#ccc')\r\n      .attr('stroke-width', 1)\r\n      .attr('opacity', 0.5);\r\n    \r\n    // Get angle and radius for each data point\r\n    const points = data.map((d, i) => {\r\n      const angle = (i / numPoints) * 2 * Math.PI * 3;\r\n      const r = spiral(angle, 2 * Math.PI * 3);\r\n      return {\r\n        ...d,\r\n        angle,\r\n        r,\r\n        x: r * Math.cos(angle),\r\n        y: r * Math.sin(angle)\r\n      };\r\n    });\r\n    \r\n    // Draw data points\r\n    g.selectAll('.data-point')\r\n      .data(points)\r\n      .enter()\r\n      .append('circle')\r\n      .attr('class', 'data-point')\r\n      .attr('cx', d => d.x)\r\n      .attr('cy', d => d.y)\r\n      .attr('r', 5)\r\n      .attr('fill', d => colorScale(d.value))\r\n      .attr('stroke', '#fff')\r\n      .attr('stroke-width', 0.5)\r\n      .on('mouseover', function(event, d) {\r\n        d3.select(this)\r\n          .attr('r', 8)\r\n          .attr('stroke-width', 2);\r\n        \r\n        tooltip.style('display', 'block')\r\n          .html(`\r\n            <strong>${formatTimeLabel(d.time, timeUnit)}</strong><br/>\r\n            Value: ${d.value.toLocaleString()}<br/>\r\n            ${getDataTypeLabel(dataType)}\r\n          `)\r\n          .style('left', (event.pageX + 10) + 'px')\r\n          .style('top', (event.pageY - 30) + 'px');\r\n      })\r\n      .on('mouseout', function() {\r\n        d3.select(this)\r\n          .attr('r', 5)\r\n          .attr('stroke-width', 0.5);\r\n        \r\n        tooltip.style('display', 'none');\r\n      });\r\n    \r\n    // Add tooltip\r\n    const tooltip = d3.select('body')\r\n      .append('div')\r\n      .attr('class', 'tooltip')\r\n      .style('display', 'none')\r\n      .style('position', 'absolute')\r\n      .style('background', 'rgba(0, 0, 0, 0.7)')\r\n      .style('color', 'white')\r\n      .style('padding', '8px')\r\n      .style('border-radius', '4px')\r\n      .style('font-size', '12px')\r\n      .style('pointer-events', 'none');\r\n    \r\n    // Add time labels\r\n    if (timeUnit === 'hourly') {\r\n      // Add hour labels at 6-hour intervals\r\n      [0, 6, 12, 18].forEach(hour => {\r\n        const hourIndex = points.findIndex(p => parseInt(p.time) === hour);\r\n        if (hourIndex >= 0) {\r\n          const point = points[hourIndex];\r\n          const labelRadius = point.r + 10;\r\n          \r\n          g.append('text')\r\n            .attr('x', labelRadius * Math.cos(point.angle))\r\n            .attr('y', labelRadius * Math.sin(point.angle))\r\n            .attr('text-anchor', 'middle')\r\n            .attr('alignment-baseline', 'middle')\r\n            .attr('font-size', '10px')\r\n            .attr('fill', '#333')\r\n            .text(`${hour}:00`);\r\n        }\r\n      });\r\n    } else if (timeUnit === 'daily') {\r\n      // Add day labels for Monday and Friday\r\n      const dayLabels = ['Mon', 'Fri'];\r\n      [1, 5].forEach(day => {\r\n        const dayIndex = points.findIndex(p => parseInt(p.time) === day);\r\n        if (dayIndex >= 0) {\r\n          const point = points[dayIndex];\r\n          const labelRadius = point.r + 10;\r\n          \r\n          g.append('text')\r\n            .attr('x', labelRadius * Math.cos(point.angle))\r\n            .attr('y', labelRadius * Math.sin(point.angle))\r\n            .attr('text-anchor', 'middle')\r\n            .attr('alignment-baseline', 'middle')\r\n            .attr('font-size', '10px')\r\n            .attr('fill', '#333')\r\n            .text(dayLabels[day === 1 ? 0 : 1]);\r\n        }\r\n      });\r\n    } else if (timeUnit === 'monthly') {\r\n      // Add month labels for January, April, July, and October\r\n      const monthLabels = ['Jan', 'Apr', 'Jul', 'Oct'];\r\n      [0, 3, 6, 9].forEach((month, i) => {\r\n        const monthIndex = points.findIndex(p => parseInt(p.time) === month);\r\n        if (monthIndex >= 0) {\r\n          const point = points[monthIndex];\r\n          const labelRadius = point.r + 10;\r\n          \r\n          g.append('text')\r\n            .attr('x', labelRadius * Math.cos(point.angle))\r\n            .attr('y', labelRadius * Math.sin(point.angle))\r\n            .attr('text-anchor', 'middle')\r\n            .attr('alignment-baseline', 'middle')\r\n            .attr('font-size', '10px')\r\n            .attr('fill', '#333')\r\n            .text(monthLabels[i]);\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Add title\r\n    svg.append('text')\r\n      .attr('x', width / 2)\r\n      .attr('y', 20)\r\n      .attr('text-anchor', 'middle')\r\n      .attr('font-size', '16px')\r\n      .attr('font-weight', 'bold')\r\n      .text(`${getDataTypeLabel(dataType)} ${getTimeUnitLabel(timeUnit)} Patterns`);\r\n    \r\n    // Add color legend\r\n    const legendWidth = 200;\r\n    const legendHeight = 15;\r\n    \r\n    const legendX = width - margin.right - legendWidth;\r\n    const legendY = height - margin.bottom + 20;\r\n    \r\n    const legendScale = d3.scaleLinear()\r\n      .domain([0, maxValue])\r\n      .range([0, legendWidth]);\r\n    \r\n    const legendAxis = d3.axisBottom(legendScale)\r\n      .ticks(5)\r\n      .tickFormat(d => d.toLocaleString());\r\n    \r\n    for (let i = 0; i < legendWidth; i++) {\r\n      const value = legendScale.invert(i);\r\n      svg.append('rect')\r\n        .attr('x', legendX + i)\r\n        .attr('y', legendY)\r\n        .attr('width', 1)\r\n        .attr('height', legendHeight)\r\n        .attr('fill', colorScale(value));\r\n    }\r\n    \r\n    svg.append('g')\r\n      .attr('transform', `translate(${legendX}, ${legendY + legendHeight})`)\r\n      .call(legendAxis)\r\n      .selectAll('text')\r\n      .attr('font-size', '10px');\r\n    \r\n    svg.append('text')\r\n      .attr('x', legendX)\r\n      .attr('y', legendY - 5)\r\n      .attr('font-size', '12px')\r\n      .text('Activity Level');\r\n    \r\n    // Add period indicator\r\n    if (period !== 'all') {\r\n      svg.append('text')\r\n        .attr('x', width / 2)\r\n        .attr('y', 40)\r\n        .attr('text-anchor', 'middle')\r\n        .attr('font-size', '14px')\r\n        .attr('font-style', 'italic')\r\n        .text(getPeriodLabel(period));\r\n    }\r\n    \r\n    // Helper functions\r\n    function formatTimeLabel(time, unit) {\r\n      if (unit === 'hourly') {\r\n        return `${time}:00`;\r\n      } else if (unit === 'daily') {\r\n        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n        return days[parseInt(time)];\r\n      } else if (unit === 'monthly') {\r\n        const months = ['January', 'February', 'March', 'April', 'May', 'June', \r\n                        'July', 'August', 'September', 'October', 'November', 'December'];\r\n        return months[parseInt(time)];\r\n      }\r\n      return time;\r\n    }\r\n    \r\n    function getDataTypeLabel(type) {\r\n      switch(type) {\r\n        case 'taxi': return 'Taxi Trips';\r\n        case 'subway': return 'Subway Ridership';\r\n        case '311': return '311 Service Calls';\r\n        default: return type;\r\n      }\r\n    }\r\n    \r\n    function getTimeUnitLabel(unit) {\r\n      switch(unit) {\r\n        case 'hourly': return 'Hourly';\r\n        case 'daily': return 'Daily';\r\n        case 'monthly': return 'Monthly';\r\n        default: return unit;\r\n      }\r\n    }\r\n    \r\n    function getPeriodLabel(period) {\r\n      switch(period) {\r\n        case 'pre-covid': return 'Pre-COVID (Before March 2020)';\r\n        case 'covid': return 'During COVID (March 2020 - June 2021)';\r\n        case 'recovery': return 'Recovery (June 2021 - December 2022)';\r\n        case 'current': return 'Current (2023 onwards)';\r\n        case 'all': return 'All Time Periods';\r\n        default: return period;\r\n      }\r\n    }\r\n    \r\n    // Cleanup\r\n    return () => {\r\n      d3.selectAll('.tooltip').remove();\r\n    };\r\n  }, [data, loading, dataType, timeUnit, period]);\r\n  \r\n  return (\r\n    <div className=\"temporal-rhythm-container\">\r\n      <div className=\"controls\">\r\n        <div className=\"control-section\">\r\n          <h3>Data Type</h3>\r\n          <div className=\"button-group\">\r\n            <button \r\n              className={dataType === 'taxi' ? 'active' : ''} \r\n              onClick={() => setDataType('taxi')}\r\n            >\r\n              Taxi Trips\r\n            </button>\r\n            <button \r\n              className={dataType === 'subway' ? 'active' : ''} \r\n              onClick={() => setDataType('subway')}\r\n            >\r\n              Subway Ridership\r\n            </button>\r\n            <button \r\n              className={dataType === '311' ? 'active' : ''} \r\n              onClick={() => setDataType('311')}\r\n            >\r\n              311 Calls\r\n            </button>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"control-section\">\r\n          <h3>Time Unit</h3>\r\n          <div className=\"button-group\">\r\n            <button \r\n              className={timeUnit === 'hourly' ? 'active' : ''} \r\n              onClick={() => setTimeUnit('hourly')}\r\n            >\r\n              Hourly\r\n            </button>\r\n            <button \r\n              className={timeUnit === 'daily' ? 'active' : ''} \r\n              onClick={() => setTimeUnit('daily')}\r\n            >\r\n              Daily\r\n            </button>\r\n            <button \r\n              className={timeUnit === 'monthly' ? 'active' : ''} \r\n              onClick={() => setTimeUnit('monthly')}\r\n            >\r\n              Monthly\r\n            </button>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"control-section\">\r\n          <h3>Time Period</h3>\r\n          <div className=\"button-group\">\r\n            <button \r\n              className={period === 'all' ? 'active' : ''} \r\n              onClick={() => setPeriod('all')}\r\n            >\r\n              All\r\n            </button>\r\n            <button \r\n              className={period === 'pre-covid' ? 'active' : ''} \r\n              onClick={() => setPeriod('pre-covid')}\r\n            >\r\n              Pre-COVID\r\n            </button>\r\n            <button \r\n              className={period === 'covid' ? 'active' : ''} \r\n              onClick={() => setPeriod('covid')}\r\n            >\r\n              During COVID\r\n            </button>\r\n            <button \r\n              className={period === 'recovery' ? 'active' : ''} \r\n              onClick={() => setPeriod('recovery')}\r\n            >\r\n              Recovery\r\n            </button>\r\n            <button \r\n              className={period === 'current' ? 'active' : ''} \r\n              onClick={() => setPeriod('current')}\r\n            >\r\n              Current\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      {loading ? (\r\n        <div className=\"loading\">Loading temporal data...</div>\r\n      ) : (\r\n        <svg \r\n          ref={svgRef} \r\n          width=\"100%\" \r\n          height=\"700\"\r\n          style={{ border: '1px solid #ddd', borderRadius: '4px' }}\r\n        ></svg>\r\n      )}\r\n      \r\n      <div className=\"description\">\r\n        <h3>Understanding Temporal Rhythms</h3>\r\n        <p>\r\n          This spiral visualization shows cyclical patterns in urban data over time.\r\n          Each point represents a time unit (hour, day, or month), with color intensity\r\n          indicating activity level. The spiral layout emphasizes repeating patterns\r\n          while showing how they evolve over time.\r\n        </p>\r\n        <p>\r\n          Try switching between data types and time units to explore different \r\n          rhythms in the city. Compare time periods to see how COVID-19 affected\r\n          urban patterns and their recovery.\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TemporalRhythmSpiral;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,KAAKC,EAAE,MAAM,IAAI;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,MAAM,GAAGP,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;EAClD,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;EACnD,MAAM,CAACW,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACe,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAEtCF,SAAS,CAAC,MAAM;IACd,MAAMmB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5BH,UAAU,CAAC,IAAI,CAAC;MAChB,IAAI;QACF;QACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAC1B,mCAAmCZ,QAAQ,aAAaE,QAAQ,WAAWE,MAAM,EACnF,CAAC;QACD,MAAMS,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAC1CL,OAAO,CAACI,YAAY,CAAC;QACrBN,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,CAAC,OAAOQ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;QACrDR,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACV,QAAQ,EAAEE,QAAQ,EAAEE,MAAM,CAAC,CAAC;EAEhCb,SAAS,CAAC,MAAM;IACd,IAAI,CAACiB,IAAI,IAAIF,OAAO,EAAE;;IAEtB;IACAZ,EAAE,CAACuB,MAAM,CAAClB,MAAM,CAACmB,OAAO,CAAC,CAACC,SAAS,CAAC,GAAG,CAAC,CAACC,MAAM,CAAC,CAAC;;IAEjD;IACA,MAAMC,KAAK,GAAGtB,MAAM,CAACmB,OAAO,CAACI,WAAW;IACxC,MAAMC,MAAM,GAAGxB,MAAM,CAACmB,OAAO,CAACM,YAAY;IAC1C,MAAMC,MAAM,GAAG;MAAEC,GAAG,EAAE,EAAE;MAAEC,KAAK,EAAE,EAAE;MAAEC,MAAM,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAG,CAAC;IAC3D,MAAMC,UAAU,GAAGT,KAAK,GAAGI,MAAM,CAACI,IAAI,GAAGJ,MAAM,CAACE,KAAK;IACrD,MAAMI,WAAW,GAAGR,MAAM,GAAGE,MAAM,CAACC,GAAG,GAAGD,MAAM,CAACG,MAAM;IAEvD,MAAMI,GAAG,GAAGtC,EAAE,CAACuB,MAAM,CAAClB,MAAM,CAACmB,OAAO,CAAC,CAClCe,IAAI,CAAC,OAAO,EAAEZ,KAAK,CAAC,CACpBY,IAAI,CAAC,QAAQ,EAAEV,MAAM,CAAC;IAEzB,MAAMW,CAAC,GAAGF,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CACtBF,IAAI,CAAC,WAAW,EAAE,aAAaZ,KAAK,GAAG,CAAC,KAAKE,MAAM,GAAG,CAAC,GAAG,CAAC;;IAE9D;IACA,MAAMa,MAAM,GAAGC,IAAI,CAACC,GAAG,CAACR,UAAU,EAAEC,WAAW,CAAC,GAAG,CAAC;IACpD,MAAMQ,SAAS,GAAG/B,IAAI,CAACgC,MAAM;IAC7B,MAAMC,WAAW,GAAGL,MAAM,GAAG,GAAG;;IAEhC;IACA,MAAMM,QAAQ,GAAGhD,EAAE,CAACiD,GAAG,CAACnC,IAAI,EAAEoC,CAAC,IAAIA,CAAC,CAACC,KAAK,CAAC;;IAE3C;IACA,MAAMC,MAAM,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;MAClC,MAAMC,CAAC,GAAGR,WAAW,GAAGM,KAAK,GAAGC,QAAQ;MACxC,OAAOC,CAAC;IACV,CAAC;;IAED;IACA,MAAMC,UAAU,GAAGxD,EAAE,CAACyD,eAAe,CAAC,CAAC,CACpCC,MAAM,CAAC,CAAC,CAAC,EAAEV,QAAQ,CAAC,CAAC,CACrBW,YAAY,CACXrD,QAAQ,KAAK,MAAM,GAAGN,EAAE,CAAC4D,kBAAkB,GAC3CtD,QAAQ,KAAK,QAAQ,GAAGN,EAAE,CAAC6D,gBAAgB,GAC3C7D,EAAE,CAAC8D,iBACL,CAAC;;IAEH;IACA,MAAMC,aAAa,GAAG/D,EAAE,CAACgE,UAAU,CAAC,CAAC,CAClCC,KAAK,CAAC,CAACf,CAAC,EAAEgB,CAAC,KAAMA,CAAC,GAAGrB,SAAS,GAAI,CAAC,GAAGF,IAAI,CAACwB,EAAE,GAAG,CAAC,CAAC,CAAC;IAAA,CACnDzB,MAAM,CAAC,CAACQ,CAAC,EAAEgB,CAAC,KAAKd,MAAM,CAAEc,CAAC,GAAGrB,SAAS,GAAI,CAAC,GAAGF,IAAI,CAACwB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAGxB,IAAI,CAACwB,EAAE,GAAG,CAAC,CAAC,CAAC;IAE/E,MAAMC,UAAU,GAAGL,aAAa,CAACM,KAAK,CAACxB,SAAS,CAAC,CAACyB,IAAI,CAAC,CAAC,CAAC,CAAC;;IAE1D;IACA9B,CAAC,CAACC,MAAM,CAAC,MAAM,CAAC,CACbF,IAAI,CAAC,GAAG,EAAE6B,UAAU,CAAC,CACrB7B,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CACpBA,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CACtBA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CACvBA,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC;;IAEvB;IACA,MAAMgC,MAAM,GAAGzD,IAAI,CAAC0D,GAAG,CAAC,CAACtB,CAAC,EAAEgB,CAAC,KAAK;MAChC,MAAMD,KAAK,GAAIC,CAAC,GAAGrB,SAAS,GAAI,CAAC,GAAGF,IAAI,CAACwB,EAAE,GAAG,CAAC;MAC/C,MAAMZ,CAAC,GAAGH,MAAM,CAACa,KAAK,EAAE,CAAC,GAAGtB,IAAI,CAACwB,EAAE,GAAG,CAAC,CAAC;MACxC,OAAO;QACL,GAAGjB,CAAC;QACJe,KAAK;QACLV,CAAC;QACDkB,CAAC,EAAElB,CAAC,GAAGZ,IAAI,CAAC+B,GAAG,CAACT,KAAK,CAAC;QACtBU,CAAC,EAAEpB,CAAC,GAAGZ,IAAI,CAACiC,GAAG,CAACX,KAAK;MACvB,CAAC;IACH,CAAC,CAAC;;IAEF;IACAzB,CAAC,CAACf,SAAS,CAAC,aAAa,CAAC,CACvBX,IAAI,CAACyD,MAAM,CAAC,CACZM,KAAK,CAAC,CAAC,CACPpC,MAAM,CAAC,QAAQ,CAAC,CAChBF,IAAI,CAAC,OAAO,EAAE,YAAY,CAAC,CAC3BA,IAAI,CAAC,IAAI,EAAEW,CAAC,IAAIA,CAAC,CAACuB,CAAC,CAAC,CACpBlC,IAAI,CAAC,IAAI,EAAEW,CAAC,IAAIA,CAAC,CAACyB,CAAC,CAAC,CACpBpC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CACZA,IAAI,CAAC,MAAM,EAAEW,CAAC,IAAIM,UAAU,CAACN,CAAC,CAACC,KAAK,CAAC,CAAC,CACtCZ,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CACtBA,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CACzBuC,EAAE,CAAC,WAAW,EAAE,UAASC,KAAK,EAAE7B,CAAC,EAAE;MAClClD,EAAE,CAACuB,MAAM,CAAC,IAAI,CAAC,CACZgB,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CACZA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;MAE1ByC,OAAO,CAACC,KAAK,CAAC,SAAS,EAAE,OAAO,CAAC,CAC9BC,IAAI,CAAC;AAChB,sBAAsBC,eAAe,CAACjC,CAAC,CAACkC,IAAI,EAAE5E,QAAQ,CAAC;AACvD,qBAAqB0C,CAAC,CAACC,KAAK,CAACkC,cAAc,CAAC,CAAC;AAC7C,cAAcC,gBAAgB,CAAChF,QAAQ,CAAC;AACxC,WAAW,CAAC,CACD2E,KAAK,CAAC,MAAM,EAAGF,KAAK,CAACQ,KAAK,GAAG,EAAE,GAAI,IAAI,CAAC,CACxCN,KAAK,CAAC,KAAK,EAAGF,KAAK,CAACS,KAAK,GAAG,EAAE,GAAI,IAAI,CAAC;IAC5C,CAAC,CAAC,CACDV,EAAE,CAAC,UAAU,EAAE,YAAW;MACzB9E,EAAE,CAACuB,MAAM,CAAC,IAAI,CAAC,CACZgB,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CACZA,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC;MAE5ByC,OAAO,CAACC,KAAK,CAAC,SAAS,EAAE,MAAM,CAAC;IAClC,CAAC,CAAC;;IAEJ;IACA,MAAMD,OAAO,GAAGhF,EAAE,CAACuB,MAAM,CAAC,MAAM,CAAC,CAC9BkB,MAAM,CAAC,KAAK,CAAC,CACbF,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CACxB0C,KAAK,CAAC,SAAS,EAAE,MAAM,CAAC,CACxBA,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,CAC7BA,KAAK,CAAC,YAAY,EAAE,oBAAoB,CAAC,CACzCA,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CACvBA,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,CACvBA,KAAK,CAAC,eAAe,EAAE,KAAK,CAAC,CAC7BA,KAAK,CAAC,WAAW,EAAE,MAAM,CAAC,CAC1BA,KAAK,CAAC,gBAAgB,EAAE,MAAM,CAAC;;IAElC;IACA,IAAIzE,QAAQ,KAAK,QAAQ,EAAE;MACzB;MACA,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAACiF,OAAO,CAACC,IAAI,IAAI;QAC7B,MAAMC,SAAS,GAAGpB,MAAM,CAACqB,SAAS,CAACC,CAAC,IAAIC,QAAQ,CAACD,CAAC,CAACT,IAAI,CAAC,KAAKM,IAAI,CAAC;QAClE,IAAIC,SAAS,IAAI,CAAC,EAAE;UAClB,MAAMI,KAAK,GAAGxB,MAAM,CAACoB,SAAS,CAAC;UAC/B,MAAMK,WAAW,GAAGD,KAAK,CAACxC,CAAC,GAAG,EAAE;UAEhCf,CAAC,CAACC,MAAM,CAAC,MAAM,CAAC,CACbF,IAAI,CAAC,GAAG,EAAEyD,WAAW,GAAGrD,IAAI,CAAC+B,GAAG,CAACqB,KAAK,CAAC9B,KAAK,CAAC,CAAC,CAC9C1B,IAAI,CAAC,GAAG,EAAEyD,WAAW,GAAGrD,IAAI,CAACiC,GAAG,CAACmB,KAAK,CAAC9B,KAAK,CAAC,CAAC,CAC9C1B,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAC7BA,IAAI,CAAC,oBAAoB,EAAE,QAAQ,CAAC,CACpCA,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,CACzBA,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CACpB0D,IAAI,CAAC,GAAGP,IAAI,KAAK,CAAC;QACvB;MACF,CAAC,CAAC;IACJ,CAAC,MAAM,IAAIlF,QAAQ,KAAK,OAAO,EAAE;MAC/B;MACA,MAAM0F,SAAS,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC;MAChC,CAAC,CAAC,EAAE,CAAC,CAAC,CAACT,OAAO,CAACU,GAAG,IAAI;QACpB,MAAMC,QAAQ,GAAG7B,MAAM,CAACqB,SAAS,CAACC,CAAC,IAAIC,QAAQ,CAACD,CAAC,CAACT,IAAI,CAAC,KAAKe,GAAG,CAAC;QAChE,IAAIC,QAAQ,IAAI,CAAC,EAAE;UACjB,MAAML,KAAK,GAAGxB,MAAM,CAAC6B,QAAQ,CAAC;UAC9B,MAAMJ,WAAW,GAAGD,KAAK,CAACxC,CAAC,GAAG,EAAE;UAEhCf,CAAC,CAACC,MAAM,CAAC,MAAM,CAAC,CACbF,IAAI,CAAC,GAAG,EAAEyD,WAAW,GAAGrD,IAAI,CAAC+B,GAAG,CAACqB,KAAK,CAAC9B,KAAK,CAAC,CAAC,CAC9C1B,IAAI,CAAC,GAAG,EAAEyD,WAAW,GAAGrD,IAAI,CAACiC,GAAG,CAACmB,KAAK,CAAC9B,KAAK,CAAC,CAAC,CAC9C1B,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAC7BA,IAAI,CAAC,oBAAoB,EAAE,QAAQ,CAAC,CACpCA,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,CACzBA,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CACpB0D,IAAI,CAACC,SAAS,CAACC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACvC;MACF,CAAC,CAAC;IACJ,CAAC,MAAM,IAAI3F,QAAQ,KAAK,SAAS,EAAE;MACjC;MACA,MAAM6F,WAAW,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;MAChD,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAACZ,OAAO,CAAC,CAACa,KAAK,EAAEpC,CAAC,KAAK;QACjC,MAAMqC,UAAU,GAAGhC,MAAM,CAACqB,SAAS,CAACC,CAAC,IAAIC,QAAQ,CAACD,CAAC,CAACT,IAAI,CAAC,KAAKkB,KAAK,CAAC;QACpE,IAAIC,UAAU,IAAI,CAAC,EAAE;UACnB,MAAMR,KAAK,GAAGxB,MAAM,CAACgC,UAAU,CAAC;UAChC,MAAMP,WAAW,GAAGD,KAAK,CAACxC,CAAC,GAAG,EAAE;UAEhCf,CAAC,CAACC,MAAM,CAAC,MAAM,CAAC,CACbF,IAAI,CAAC,GAAG,EAAEyD,WAAW,GAAGrD,IAAI,CAAC+B,GAAG,CAACqB,KAAK,CAAC9B,KAAK,CAAC,CAAC,CAC9C1B,IAAI,CAAC,GAAG,EAAEyD,WAAW,GAAGrD,IAAI,CAACiC,GAAG,CAACmB,KAAK,CAAC9B,KAAK,CAAC,CAAC,CAC9C1B,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAC7BA,IAAI,CAAC,oBAAoB,EAAE,QAAQ,CAAC,CACpCA,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,CACzBA,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CACpB0D,IAAI,CAACI,WAAW,CAACnC,CAAC,CAAC,CAAC;QACzB;MACF,CAAC,CAAC;IACJ;;IAEA;IACA5B,GAAG,CAACG,MAAM,CAAC,MAAM,CAAC,CACfF,IAAI,CAAC,GAAG,EAAEZ,KAAK,GAAG,CAAC,CAAC,CACpBY,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CACbA,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAC7BA,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,CACzBA,IAAI,CAAC,aAAa,EAAE,MAAM,CAAC,CAC3B0D,IAAI,CAAC,GAAGX,gBAAgB,CAAChF,QAAQ,CAAC,IAAIkG,gBAAgB,CAAChG,QAAQ,CAAC,WAAW,CAAC;;IAE/E;IACA,MAAMiG,WAAW,GAAG,GAAG;IACvB,MAAMC,YAAY,GAAG,EAAE;IAEvB,MAAMC,OAAO,GAAGhF,KAAK,GAAGI,MAAM,CAACE,KAAK,GAAGwE,WAAW;IAClD,MAAMG,OAAO,GAAG/E,MAAM,GAAGE,MAAM,CAACG,MAAM,GAAG,EAAE;IAE3C,MAAM2E,WAAW,GAAG7G,EAAE,CAAC8G,WAAW,CAAC,CAAC,CACjCpD,MAAM,CAAC,CAAC,CAAC,EAAEV,QAAQ,CAAC,CAAC,CACrB+D,KAAK,CAAC,CAAC,CAAC,EAAEN,WAAW,CAAC,CAAC;IAE1B,MAAMO,UAAU,GAAGhH,EAAE,CAACiH,UAAU,CAACJ,WAAW,CAAC,CAC1CK,KAAK,CAAC,CAAC,CAAC,CACRC,UAAU,CAACjE,CAAC,IAAIA,CAAC,CAACmC,cAAc,CAAC,CAAC,CAAC;IAEtC,KAAK,IAAInB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuC,WAAW,EAAEvC,CAAC,EAAE,EAAE;MACpC,MAAMf,KAAK,GAAG0D,WAAW,CAACO,MAAM,CAAClD,CAAC,CAAC;MACnC5B,GAAG,CAACG,MAAM,CAAC,MAAM,CAAC,CACfF,IAAI,CAAC,GAAG,EAAEoE,OAAO,GAAGzC,CAAC,CAAC,CACtB3B,IAAI,CAAC,GAAG,EAAEqE,OAAO,CAAC,CAClBrE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAChBA,IAAI,CAAC,QAAQ,EAAEmE,YAAY,CAAC,CAC5BnE,IAAI,CAAC,MAAM,EAAEiB,UAAU,CAACL,KAAK,CAAC,CAAC;IACpC;IAEAb,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CACZF,IAAI,CAAC,WAAW,EAAE,aAAaoE,OAAO,KAAKC,OAAO,GAAGF,YAAY,GAAG,CAAC,CACrEW,IAAI,CAACL,UAAU,CAAC,CAChBvF,SAAS,CAAC,MAAM,CAAC,CACjBc,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC;IAE5BD,GAAG,CAACG,MAAM,CAAC,MAAM,CAAC,CACfF,IAAI,CAAC,GAAG,EAAEoE,OAAO,CAAC,CAClBpE,IAAI,CAAC,GAAG,EAAEqE,OAAO,GAAG,CAAC,CAAC,CACtBrE,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,CACzB0D,IAAI,CAAC,gBAAgB,CAAC;;IAEzB;IACA,IAAIvF,MAAM,KAAK,KAAK,EAAE;MACpB4B,GAAG,CAACG,MAAM,CAAC,MAAM,CAAC,CACfF,IAAI,CAAC,GAAG,EAAEZ,KAAK,GAAG,CAAC,CAAC,CACpBY,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CACbA,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAC7BA,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,CACzBA,IAAI,CAAC,YAAY,EAAE,QAAQ,CAAC,CAC5B0D,IAAI,CAACqB,cAAc,CAAC5G,MAAM,CAAC,CAAC;IACjC;;IAEA;IACA,SAASyE,eAAeA,CAACC,IAAI,EAAEmC,IAAI,EAAE;MACnC,IAAIA,IAAI,KAAK,QAAQ,EAAE;QACrB,OAAO,GAAGnC,IAAI,KAAK;MACrB,CAAC,MAAM,IAAImC,IAAI,KAAK,OAAO,EAAE;QAC3B,MAAMC,IAAI,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,CAAC;QAC3F,OAAOA,IAAI,CAAC1B,QAAQ,CAACV,IAAI,CAAC,CAAC;MAC7B,CAAC,MAAM,IAAImC,IAAI,KAAK,SAAS,EAAE;QAC7B,MAAME,MAAM,GAAG,CAAC,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EACtD,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,CAAC;QACjF,OAAOA,MAAM,CAAC3B,QAAQ,CAACV,IAAI,CAAC,CAAC;MAC/B;MACA,OAAOA,IAAI;IACb;IAEA,SAASE,gBAAgBA,CAACoC,IAAI,EAAE;MAC9B,QAAOA,IAAI;QACT,KAAK,MAAM;UAAE,OAAO,YAAY;QAChC,KAAK,QAAQ;UAAE,OAAO,kBAAkB;QACxC,KAAK,KAAK;UAAE,OAAO,mBAAmB;QACtC;UAAS,OAAOA,IAAI;MACtB;IACF;IAEA,SAASlB,gBAAgBA,CAACe,IAAI,EAAE;MAC9B,QAAOA,IAAI;QACT,KAAK,QAAQ;UAAE,OAAO,QAAQ;QAC9B,KAAK,OAAO;UAAE,OAAO,OAAO;QAC5B,KAAK,SAAS;UAAE,OAAO,SAAS;QAChC;UAAS,OAAOA,IAAI;MACtB;IACF;IAEA,SAASD,cAAcA,CAAC5G,MAAM,EAAE;MAC9B,QAAOA,MAAM;QACX,KAAK,WAAW;UAAE,OAAO,+BAA+B;QACxD,KAAK,OAAO;UAAE,OAAO,uCAAuC;QAC5D,KAAK,UAAU;UAAE,OAAO,sCAAsC;QAC9D,KAAK,SAAS;UAAE,OAAO,wBAAwB;QAC/C,KAAK,KAAK;UAAE,OAAO,kBAAkB;QACrC;UAAS,OAAOA,MAAM;MACxB;IACF;;IAEA;IACA,OAAO,MAAM;MACXV,EAAE,CAACyB,SAAS,CAAC,UAAU,CAAC,CAACC,MAAM,CAAC,CAAC;IACnC,CAAC;EACH,CAAC,EAAE,CAACZ,IAAI,EAAEF,OAAO,EAAEN,QAAQ,EAAEE,QAAQ,EAAEE,MAAM,CAAC,CAAC;EAE/C,oBACER,OAAA;IAAKyH,SAAS,EAAC,2BAA2B;IAAAC,QAAA,gBACxC1H,OAAA;MAAKyH,SAAS,EAAC,UAAU;MAAAC,QAAA,gBACvB1H,OAAA;QAAKyH,SAAS,EAAC,iBAAiB;QAAAC,QAAA,gBAC9B1H,OAAA;UAAA0H,QAAA,EAAI;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAClB9H,OAAA;UAAKyH,SAAS,EAAC,cAAc;UAAAC,QAAA,gBAC3B1H,OAAA;YACEyH,SAAS,EAAErH,QAAQ,KAAK,MAAM,GAAG,QAAQ,GAAG,EAAG;YAC/C2H,OAAO,EAAEA,CAAA,KAAM1H,WAAW,CAAC,MAAM,CAAE;YAAAqH,QAAA,EACpC;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACT9H,OAAA;YACEyH,SAAS,EAAErH,QAAQ,KAAK,QAAQ,GAAG,QAAQ,GAAG,EAAG;YACjD2H,OAAO,EAAEA,CAAA,KAAM1H,WAAW,CAAC,QAAQ,CAAE;YAAAqH,QAAA,EACtC;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACT9H,OAAA;YACEyH,SAAS,EAAErH,QAAQ,KAAK,KAAK,GAAG,QAAQ,GAAG,EAAG;YAC9C2H,OAAO,EAAEA,CAAA,KAAM1H,WAAW,CAAC,KAAK,CAAE;YAAAqH,QAAA,EACnC;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAEN9H,OAAA;QAAKyH,SAAS,EAAC,iBAAiB;QAAAC,QAAA,gBAC9B1H,OAAA;UAAA0H,QAAA,EAAI;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAClB9H,OAAA;UAAKyH,SAAS,EAAC,cAAc;UAAAC,QAAA,gBAC3B1H,OAAA;YACEyH,SAAS,EAAEnH,QAAQ,KAAK,QAAQ,GAAG,QAAQ,GAAG,EAAG;YACjDyH,OAAO,EAAEA,CAAA,KAAMxH,WAAW,CAAC,QAAQ,CAAE;YAAAmH,QAAA,EACtC;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACT9H,OAAA;YACEyH,SAAS,EAAEnH,QAAQ,KAAK,OAAO,GAAG,QAAQ,GAAG,EAAG;YAChDyH,OAAO,EAAEA,CAAA,KAAMxH,WAAW,CAAC,OAAO,CAAE;YAAAmH,QAAA,EACrC;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACT9H,OAAA;YACEyH,SAAS,EAAEnH,QAAQ,KAAK,SAAS,GAAG,QAAQ,GAAG,EAAG;YAClDyH,OAAO,EAAEA,CAAA,KAAMxH,WAAW,CAAC,SAAS,CAAE;YAAAmH,QAAA,EACvC;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAEN9H,OAAA;QAAKyH,SAAS,EAAC,iBAAiB;QAAAC,QAAA,gBAC9B1H,OAAA;UAAA0H,QAAA,EAAI;QAAW;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACpB9H,OAAA;UAAKyH,SAAS,EAAC,cAAc;UAAAC,QAAA,gBAC3B1H,OAAA;YACEyH,SAAS,EAAEjH,MAAM,KAAK,KAAK,GAAG,QAAQ,GAAG,EAAG;YAC5CuH,OAAO,EAAEA,CAAA,KAAMtH,SAAS,CAAC,KAAK,CAAE;YAAAiH,QAAA,EACjC;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACT9H,OAAA;YACEyH,SAAS,EAAEjH,MAAM,KAAK,WAAW,GAAG,QAAQ,GAAG,EAAG;YAClDuH,OAAO,EAAEA,CAAA,KAAMtH,SAAS,CAAC,WAAW,CAAE;YAAAiH,QAAA,EACvC;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACT9H,OAAA;YACEyH,SAAS,EAAEjH,MAAM,KAAK,OAAO,GAAG,QAAQ,GAAG,EAAG;YAC9CuH,OAAO,EAAEA,CAAA,KAAMtH,SAAS,CAAC,OAAO,CAAE;YAAAiH,QAAA,EACnC;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACT9H,OAAA;YACEyH,SAAS,EAAEjH,MAAM,KAAK,UAAU,GAAG,QAAQ,GAAG,EAAG;YACjDuH,OAAO,EAAEA,CAAA,KAAMtH,SAAS,CAAC,UAAU,CAAE;YAAAiH,QAAA,EACtC;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACT9H,OAAA;YACEyH,SAAS,EAAEjH,MAAM,KAAK,SAAS,GAAG,QAAQ,GAAG,EAAG;YAChDuH,OAAO,EAAEA,CAAA,KAAMtH,SAAS,CAAC,SAAS,CAAE;YAAAiH,QAAA,EACrC;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,EAELpH,OAAO,gBACNV,OAAA;MAAKyH,SAAS,EAAC,SAAS;MAAAC,QAAA,EAAC;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,gBAEvD9H,OAAA;MACEgI,GAAG,EAAE7H,MAAO;MACZsB,KAAK,EAAC,MAAM;MACZE,MAAM,EAAC,KAAK;MACZoD,KAAK,EAAE;QAAEkD,MAAM,EAAE,gBAAgB;QAAEC,YAAY,EAAE;MAAM;IAAE;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrD,CACP,eAED9H,OAAA;MAAKyH,SAAS,EAAC,aAAa;MAAAC,QAAA,gBAC1B1H,OAAA;QAAA0H,QAAA,EAAI;MAA8B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACvC9H,OAAA;QAAA0H,QAAA,EAAG;MAKH;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJ9H,OAAA;QAAA0H,QAAA,EAAG;MAIH;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC5H,EAAA,CA3aID,oBAAoB;AAAAkI,EAAA,GAApBlI,oBAAoB;AA6a1B,eAAeA,oBAAoB;AAAC,IAAAkI,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}