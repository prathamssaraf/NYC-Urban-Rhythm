{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prath\\\\Desktop\\\\infoviz\\\\project\\\\src\\\\visualizations\\\\UrbanFlowParticles.js\",\n  _s = $RefreshSig$();\n// src/visualizations/UrbanFlowParticles.js\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UrbanFlowParticles = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const [period, setPeriod] = useState('current'); // 'pre-covid', 'covid', 'recovery', 'current'\n  const [timeOfDay, setTimeOfDay] = useState('all'); // 'morning', 'afternoon', 'evening', 'night', 'all'\n  const [transportType, setTransportType] = useState('all'); // 'taxi', 'subway', 'all'\n  const [selectedBorough, setSelectedBorough] = useState('all'); // 'Manhattan', 'Brooklyn', etc.\n  const [loading, setLoading] = useState(true);\n  const [flowData, setFlowData] = useState(null);\n  const animationRef = useRef(null);\n  const boroughs = ['Manhattan', 'Brooklyn', 'Queens', 'Bronx', 'Staten Island'];\n\n  // Set up and load borough boundaries\n  const [boroughBoundaries, setBoroughBoundaries] = useState(null);\n  useEffect(() => {\n    const fetchBoundaries = async () => {\n      try {\n        const response = await fetch('/api/nyc-boroughs.json');\n        const data = await response.json();\n        setBoroughBoundaries(data);\n      } catch (error) {\n        console.error('Error fetching borough boundaries:', error);\n      }\n    };\n    fetchBoundaries();\n  }, []);\n\n  // Fetch flow data when filters change\n  useEffect(() => {\n    const fetchFlowData = async () => {\n      setLoading(true);\n      try {\n        const response = await fetch(`/api/flow-data?period=${period}&timeOfDay=${timeOfDay}&transportType=${transportType}&borough=${selectedBorough}`);\n        const data = await response.json();\n        setFlowData(data);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching flow data:', error);\n        setLoading(false);\n      }\n    };\n    fetchFlowData();\n  }, [period, timeOfDay, transportType, selectedBorough]);\n\n  // Handle canvas setup and animation\n  useEffect(() => {\n    if (!flowData || loading || !boroughBoundaries) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas dimensions\n    const resizeCanvas = () => {\n      const containerWidth = canvas.parentElement.clientWidth;\n      canvas.width = containerWidth;\n      canvas.height = containerWidth * 0.75; // 4:3 aspect ratio\n    };\n    resizeCanvas();\n    window.addEventListener('resize', resizeCanvas);\n\n    // Map coordinates to canvas\n    const mapCoordinates = (lon, lat) => {\n      // NYC approximate bounding box\n      const nycBounds = {\n        minLon: -74.25,\n        maxLon: -73.7,\n        minLat: 40.5,\n        maxLat: 40.9\n      };\n      const x = (lon - nycBounds.minLon) / (nycBounds.maxLon - nycBounds.minLon) * canvas.width;\n      const y = canvas.height - (lat - nycBounds.minLat) / (nycBounds.maxLat - nycBounds.minLat) * canvas.height;\n      return {\n        x,\n        y\n      };\n    };\n\n    // Draw borough boundaries\n    const drawBoroughs = () => {\n      ctx.lineWidth = 1;\n      ctx.strokeStyle = '#444';\n      boroughBoundaries.features.forEach(feature => {\n        const boroughName = feature.properties.borough;\n\n        // Highlight selected borough\n        if (selectedBorough === boroughName || selectedBorough === 'all') {\n          ctx.strokeStyle = selectedBorough === boroughName ? '#222' : '#444';\n          ctx.lineWidth = selectedBorough === boroughName ? 2 : 1;\n\n          // Draw borough outline\n          ctx.beginPath();\n          feature.geometry.coordinates.forEach(polygon => {\n            polygon.forEach((coord, i) => {\n              const point = mapCoordinates(coord[0], coord[1]);\n              if (i === 0) {\n                ctx.moveTo(point.x, point.y);\n              } else {\n                ctx.lineTo(point.x, point.y);\n              }\n            });\n          });\n          ctx.stroke();\n\n          // Add borough label\n          if (feature.geometry.coordinates[0] && feature.geometry.coordinates[0].length > 0) {\n            // Find center of borough for label placement (simplified)\n            let sumLon = 0;\n            let sumLat = 0;\n            let points = feature.geometry.coordinates[0];\n            points.forEach(point => {\n              sumLon += point[0];\n              sumLat += point[1];\n            });\n            const centerLon = sumLon / points.length;\n            const centerLat = sumLat / points.length;\n            const center = mapCoordinates(centerLon, centerLat);\n            ctx.fillStyle = '#333';\n            ctx.font = '12px Arial';\n            ctx.textAlign = 'center';\n            ctx.fillText(boroughName, center.x, center.y);\n          }\n        }\n      });\n    };\n\n    // Create particles\n    const createParticles = () => {\n      return flowData.map(flow => {\n        const origin = mapCoordinates(flow.origin_lon, flow.origin_lat);\n        const destination = mapCoordinates(flow.dest_lon, flow.dest_lat);\n\n        // Calculate direction vector\n        const dx = destination.x - origin.x;\n        const dy = destination.y - origin.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n\n        // Number of particles based on flow volume\n        const particleCount = Math.ceil(flow.volume / 50);\n\n        // Create particles for this flow\n        const particles = [];\n        for (let i = 0; i < particleCount; i++) {\n          // Random starting position along the path\n          const progress = Math.random();\n          const x = origin.x + dx * progress;\n          const y = origin.y + dy * progress;\n          particles.push({\n            x,\n            y,\n            origin,\n            destination,\n            speed: 0.5 + Math.random() * 1.5,\n            progress,\n            color: flow.type === 'taxi' ? '#ff7700' : '#0077ff',\n            size: 3\n          });\n        }\n        return particles;\n      }).flat();\n    };\n\n    // Initialize particles\n    let particles = createParticles();\n\n    // Animation function\n    const animate = () => {\n      // Clear canvas\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Draw background\n      ctx.fillStyle = '#f8f8f8';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Draw borough boundaries\n      drawBoroughs();\n\n      // Draw and update particles\n      particles.forEach(particle => {\n        // Calculate direction vector\n        const dx = particle.destination.x - particle.origin.x;\n        const dy = particle.destination.y - particle.origin.y;\n\n        // Update position\n        particle.progress += 0.002 * particle.speed;\n\n        // Reset if reached destination\n        if (particle.progress >= 1) {\n          particle.progress = 0;\n        }\n\n        // Calculate new position\n        particle.x = particle.origin.x + dx * particle.progress;\n        particle.y = particle.origin.y + dy * particle.progress;\n\n        // Draw particle\n        ctx.beginPath();\n        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\n        ctx.fillStyle = particle.color;\n        ctx.fill();\n      });\n\n      // Continue animation\n      animationRef.current = requestAnimationFrame(animate);\n    };\n\n    // Start animation\n    animate();\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', resizeCanvas);\n      cancelAnimationFrame(animationRef.current);\n    };\n  }, [flowData, loading, selectedBorough, boroughBoundaries]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"urban-flow-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Time Period\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: period === 'pre-covid' ? 'active' : '',\n            onClick: () => setPeriod('pre-covid'),\n            children: \"Pre-COVID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: period === 'covid' ? 'active' : '',\n            onClick: () => setPeriod('covid'),\n            children: \"During COVID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: period === 'recovery' ? 'active' : '',\n            onClick: () => setPeriod('recovery'),\n            children: \"Recovery\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: period === 'current' ? 'active' : '',\n            onClick: () => setPeriod('current'),\n            children: \"Current\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Time of Day\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: timeOfDay === 'all' ? 'active' : '',\n            onClick: () => setTimeOfDay('all'),\n            children: \"All Times\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: timeOfDay === 'morning' ? 'active' : '',\n            onClick: () => setTimeOfDay('morning'),\n            children: \"Morning (6-10 AM)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: timeOfDay === 'afternoon' ? 'active' : '',\n            onClick: () => setTimeOfDay('afternoon'),\n            children: \"Afternoon (11-3 PM)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: timeOfDay === 'evening' ? 'active' : '',\n            onClick: () => setTimeOfDay('evening'),\n            children: \"Evening (4-8 PM)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: timeOfDay === 'night' ? 'active' : '',\n            onClick: () => setTimeOfDay('night'),\n            children: \"Night (9 PM-5 AM)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Transportation Type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: transportType === 'all' ? 'active' : '',\n            onClick: () => setTransportType('all'),\n            children: \"All Types\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: transportType === 'taxi' ? 'active' : '',\n            onClick: () => setTransportType('taxi'),\n            children: \"Taxi\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: transportType === 'subway' ? 'active' : '',\n            onClick: () => setTransportType('subway'),\n            children: \"Subway\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Borough\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: selectedBorough === 'all' ? 'active' : '',\n            onClick: () => setSelectedBorough('all'),\n            children: \"All Boroughs\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 13\n          }, this), boroughs.map(borough => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: selectedBorough === borough ? 'active' : '',\n            onClick: () => setSelectedBorough(borough),\n            children: borough\n          }, borough, false, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading flow data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        className: \"flow-canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"color-box\",\n            style: {\n              backgroundColor: '#ff7700'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Taxi Trips\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"color-box\",\n            style: {\n              backgroundColor: '#0077ff'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Subway Travel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"description\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Understanding Urban Flows\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This visualization shows movement patterns across New York City. Each particle represents people moving from an origin to a destination, with color indicating the transportation mode. The density of particles reflects the volume of movement along each route.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Use the controls to filter by time period, time of day, transportation type, and borough to explore how urban movement changed before, during, and after COVID-19.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 5\n  }, this);\n};\n_s(UrbanFlowParticles, \"uNpghVE5v9bXtCzUE+37fmn3z44=\");\n_c = UrbanFlowParticles;\nexport default UrbanFlowParticles;\nvar _c;\n$RefreshReg$(_c, \"UrbanFlowParticles\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","UrbanFlowParticles","_s","canvasRef","period","setPeriod","timeOfDay","setTimeOfDay","transportType","setTransportType","selectedBorough","setSelectedBorough","loading","setLoading","flowData","setFlowData","animationRef","boroughs","boroughBoundaries","setBoroughBoundaries","fetchBoundaries","response","fetch","data","json","error","console","fetchFlowData","canvas","current","ctx","getContext","resizeCanvas","containerWidth","parentElement","clientWidth","width","height","window","addEventListener","mapCoordinates","lon","lat","nycBounds","minLon","maxLon","minLat","maxLat","x","y","drawBoroughs","lineWidth","strokeStyle","features","forEach","feature","boroughName","properties","borough","beginPath","geometry","coordinates","polygon","coord","i","point","moveTo","lineTo","stroke","length","sumLon","sumLat","points","centerLon","centerLat","center","fillStyle","font","textAlign","fillText","createParticles","map","flow","origin","origin_lon","origin_lat","destination","dest_lon","dest_lat","dx","dy","distance","Math","sqrt","particleCount","ceil","volume","particles","progress","random","push","speed","color","type","size","flat","animate","clearRect","fillRect","particle","arc","PI","fill","requestAnimationFrame","removeEventListener","cancelAnimationFrame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","style","backgroundColor","_c","$RefreshReg$"],"sources":["C:/Users/prath/Desktop/infoviz/project/src/visualizations/UrbanFlowParticles.js"],"sourcesContent":["// src/visualizations/UrbanFlowParticles.js\r\nimport React, { useEffect, useRef, useState } from 'react';\r\n\r\nconst UrbanFlowParticles = () => {\r\n  const canvasRef = useRef(null);\r\n  const [period, setPeriod] = useState('current'); // 'pre-covid', 'covid', 'recovery', 'current'\r\n  const [timeOfDay, setTimeOfDay] = useState('all'); // 'morning', 'afternoon', 'evening', 'night', 'all'\r\n  const [transportType, setTransportType] = useState('all'); // 'taxi', 'subway', 'all'\r\n  const [selectedBorough, setSelectedBorough] = useState('all'); // 'Manhattan', 'Brooklyn', etc.\r\n  const [loading, setLoading] = useState(true);\r\n  const [flowData, setFlowData] = useState(null);\r\n  const animationRef = useRef(null);\r\n  \r\n  const boroughs = ['Manhattan', 'Brooklyn', 'Queens', 'Bronx', 'Staten Island'];\r\n  \r\n  // Set up and load borough boundaries\r\n  const [boroughBoundaries, setBoroughBoundaries] = useState(null);\r\n  \r\n  useEffect(() => {\r\n    const fetchBoundaries = async () => {\r\n      try {\r\n        const response = await fetch('/api/nyc-boroughs.json');\r\n        const data = await response.json();\r\n        setBoroughBoundaries(data);\r\n      } catch (error) {\r\n        console.error('Error fetching borough boundaries:', error);\r\n      }\r\n    };\r\n    \r\n    fetchBoundaries();\r\n  }, []);\r\n  \r\n  // Fetch flow data when filters change\r\n  useEffect(() => {\r\n    const fetchFlowData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const response = await fetch(\r\n          `/api/flow-data?period=${period}&timeOfDay=${timeOfDay}&transportType=${transportType}&borough=${selectedBorough}`\r\n        );\r\n        const data = await response.json();\r\n        setFlowData(data);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching flow data:', error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchFlowData();\r\n  }, [period, timeOfDay, transportType, selectedBorough]);\r\n  \r\n  // Handle canvas setup and animation\r\n  useEffect(() => {\r\n    if (!flowData || loading || !boroughBoundaries) return;\r\n    \r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    \r\n    // Set canvas dimensions\r\n    const resizeCanvas = () => {\r\n      const containerWidth = canvas.parentElement.clientWidth;\r\n      canvas.width = containerWidth;\r\n      canvas.height = containerWidth * 0.75; // 4:3 aspect ratio\r\n    };\r\n    \r\n    resizeCanvas();\r\n    window.addEventListener('resize', resizeCanvas);\r\n    \r\n    // Map coordinates to canvas\r\n    const mapCoordinates = (lon, lat) => {\r\n      // NYC approximate bounding box\r\n      const nycBounds = {\r\n        minLon: -74.25,\r\n        maxLon: -73.7,\r\n        minLat: 40.5,\r\n        maxLat: 40.9\r\n      };\r\n      \r\n      const x = ((lon - nycBounds.minLon) / (nycBounds.maxLon - nycBounds.minLon)) * canvas.width;\r\n      const y = canvas.height - ((lat - nycBounds.minLat) / (nycBounds.maxLat - nycBounds.minLat)) * canvas.height;\r\n      \r\n      return { x, y };\r\n    };\r\n    \r\n    // Draw borough boundaries\r\n    const drawBoroughs = () => {\r\n      ctx.lineWidth = 1;\r\n      ctx.strokeStyle = '#444';\r\n      \r\n      boroughBoundaries.features.forEach(feature => {\r\n        const boroughName = feature.properties.borough;\r\n        \r\n        // Highlight selected borough\r\n        if (selectedBorough === boroughName || selectedBorough === 'all') {\r\n          ctx.strokeStyle = selectedBorough === boroughName ? '#222' : '#444';\r\n          ctx.lineWidth = selectedBorough === boroughName ? 2 : 1;\r\n          \r\n          // Draw borough outline\r\n          ctx.beginPath();\r\n          \r\n          feature.geometry.coordinates.forEach(polygon => {\r\n            polygon.forEach((coord, i) => {\r\n              const point = mapCoordinates(coord[0], coord[1]);\r\n              if (i === 0) {\r\n                ctx.moveTo(point.x, point.y);\r\n              } else {\r\n                ctx.lineTo(point.x, point.y);\r\n              }\r\n            });\r\n          });\r\n          \r\n          ctx.stroke();\r\n          \r\n          // Add borough label\r\n          if (feature.geometry.coordinates[0] && feature.geometry.coordinates[0].length > 0) {\r\n            // Find center of borough for label placement (simplified)\r\n            let sumLon = 0;\r\n            let sumLat = 0;\r\n            let points = feature.geometry.coordinates[0];\r\n            \r\n            points.forEach(point => {\r\n              sumLon += point[0];\r\n              sumLat += point[1];\r\n            });\r\n            \r\n            const centerLon = sumLon / points.length;\r\n            const centerLat = sumLat / points.length;\r\n            const center = mapCoordinates(centerLon, centerLat);\r\n            \r\n            ctx.fillStyle = '#333';\r\n            ctx.font = '12px Arial';\r\n            ctx.textAlign = 'center';\r\n            ctx.fillText(boroughName, center.x, center.y);\r\n          }\r\n        }\r\n      });\r\n    };\r\n    \r\n    // Create particles\r\n    const createParticles = () => {\r\n      return flowData.map(flow => {\r\n        const origin = mapCoordinates(flow.origin_lon, flow.origin_lat);\r\n        const destination = mapCoordinates(flow.dest_lon, flow.dest_lat);\r\n        \r\n        // Calculate direction vector\r\n        const dx = destination.x - origin.x;\r\n        const dy = destination.y - origin.y;\r\n        const distance = Math.sqrt(dx * dx + dy * dy);\r\n        \r\n        // Number of particles based on flow volume\r\n        const particleCount = Math.ceil(flow.volume / 50);\r\n        \r\n        // Create particles for this flow\r\n        const particles = [];\r\n        for (let i = 0; i < particleCount; i++) {\r\n          // Random starting position along the path\r\n          const progress = Math.random();\r\n          const x = origin.x + dx * progress;\r\n          const y = origin.y + dy * progress;\r\n          \r\n          particles.push({\r\n            x,\r\n            y,\r\n            origin,\r\n            destination,\r\n            speed: 0.5 + Math.random() * 1.5,\r\n            progress,\r\n            color: flow.type === 'taxi' ? '#ff7700' : '#0077ff',\r\n            size: 3\r\n          });\r\n        }\r\n        \r\n        return particles;\r\n      }).flat();\r\n    };\r\n    \r\n    // Initialize particles\r\n    let particles = createParticles();\r\n    \r\n    // Animation function\r\n    const animate = () => {\r\n      // Clear canvas\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      \r\n      // Draw background\r\n      ctx.fillStyle = '#f8f8f8';\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n      \r\n      // Draw borough boundaries\r\n      drawBoroughs();\r\n      \r\n      // Draw and update particles\r\n      particles.forEach(particle => {\r\n        // Calculate direction vector\r\n        const dx = particle.destination.x - particle.origin.x;\r\n        const dy = particle.destination.y - particle.origin.y;\r\n        \r\n        // Update position\r\n        particle.progress += 0.002 * particle.speed;\r\n        \r\n        // Reset if reached destination\r\n        if (particle.progress >= 1) {\r\n          particle.progress = 0;\r\n        }\r\n        \r\n        // Calculate new position\r\n        particle.x = particle.origin.x + dx * particle.progress;\r\n        particle.y = particle.origin.y + dy * particle.progress;\r\n        \r\n        // Draw particle\r\n        ctx.beginPath();\r\n        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\r\n        ctx.fillStyle = particle.color;\r\n        ctx.fill();\r\n      });\r\n      \r\n      // Continue animation\r\n      animationRef.current = requestAnimationFrame(animate);\r\n    };\r\n    \r\n    // Start animation\r\n    animate();\r\n    \r\n    // Cleanup\r\n    return () => {\r\n      window.removeEventListener('resize', resizeCanvas);\r\n      cancelAnimationFrame(animationRef.current);\r\n    };\r\n  }, [flowData, loading, selectedBorough, boroughBoundaries]);\r\n  \r\n  return (\r\n    <div className=\"urban-flow-container\">\r\n      <div className=\"controls\">\r\n        <div className=\"control-section\">\r\n          <h3>Time Period</h3>\r\n          <div className=\"button-group\">\r\n            <button \r\n              className={period === 'pre-covid' ? 'active' : ''} \r\n              onClick={() => setPeriod('pre-covid')}\r\n            >\r\n              Pre-COVID\r\n            </button>\r\n            <button \r\n              className={period === 'covid' ? 'active' : ''} \r\n              onClick={() => setPeriod('covid')}\r\n            >\r\n              During COVID\r\n            </button>\r\n            <button \r\n              className={period === 'recovery' ? 'active' : ''} \r\n              onClick={() => setPeriod('recovery')}\r\n            >\r\n              Recovery\r\n            </button>\r\n            <button \r\n              className={period === 'current' ? 'active' : ''} \r\n              onClick={() => setPeriod('current')}\r\n            >\r\n              Current\r\n            </button>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"control-section\">\r\n          <h3>Time of Day</h3>\r\n          <div className=\"button-group\">\r\n            <button \r\n              className={timeOfDay === 'all' ? 'active' : ''} \r\n              onClick={() => setTimeOfDay('all')}\r\n            >\r\n              All Times\r\n            </button>\r\n            <button \r\n              className={timeOfDay === 'morning' ? 'active' : ''} \r\n              onClick={() => setTimeOfDay('morning')}\r\n            >\r\n              Morning (6-10 AM)\r\n            </button>\r\n            <button \r\n              className={timeOfDay === 'afternoon' ? 'active' : ''} \r\n              onClick={() => setTimeOfDay('afternoon')}\r\n            >\r\n              Afternoon (11-3 PM)\r\n            </button>\r\n            <button \r\n              className={timeOfDay === 'evening' ? 'active' : ''} \r\n              onClick={() => setTimeOfDay('evening')}\r\n            >\r\n              Evening (4-8 PM)\r\n            </button>\r\n            <button \r\n              className={timeOfDay === 'night' ? 'active' : ''} \r\n              onClick={() => setTimeOfDay('night')}\r\n            >\r\n              Night (9 PM-5 AM)\r\n            </button>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"control-section\">\r\n          <h3>Transportation Type</h3>\r\n          <div className=\"button-group\">\r\n            <button \r\n              className={transportType === 'all' ? 'active' : ''} \r\n              onClick={() => setTransportType('all')}\r\n            >\r\n              All Types\r\n            </button>\r\n            <button \r\n              className={transportType === 'taxi' ? 'active' : ''} \r\n              onClick={() => setTransportType('taxi')}\r\n            >\r\n              Taxi\r\n            </button>\r\n            <button \r\n              className={transportType === 'subway' ? 'active' : ''} \r\n              onClick={() => setTransportType('subway')}\r\n            >\r\n              Subway\r\n            </button>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"control-section\">\r\n          <h3>Borough</h3>\r\n          <div className=\"button-group\">\r\n            <button \r\n              className={selectedBorough === 'all' ? 'active' : ''} \r\n              onClick={() => setSelectedBorough('all')}\r\n            >\r\n              All Boroughs\r\n            </button>\r\n            {boroughs.map(borough => (\r\n              <button \r\n                key={borough}\r\n                className={selectedBorough === borough ? 'active' : ''} \r\n                onClick={() => setSelectedBorough(borough)}\r\n              >\r\n                {borough}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      {loading ? (\r\n        <div className=\"loading\">Loading flow data...</div>\r\n      ) : (\r\n        <div className=\"canvas-container\">\r\n          <canvas \r\n            ref={canvasRef} \r\n            className=\"flow-canvas\"\r\n          ></canvas>\r\n          \r\n          <div className=\"legend\">\r\n            <div className=\"legend-item\">\r\n              <div className=\"color-box\" style={{ backgroundColor: '#ff7700' }}></div>\r\n              <span>Taxi Trips</span>\r\n            </div>\r\n            <div className=\"legend-item\">\r\n              <div className=\"color-box\" style={{ backgroundColor: '#0077ff' }}></div>\r\n              <span>Subway Travel</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      <div className=\"description\">\r\n        <h3>Understanding Urban Flows</h3>\r\n        <p>\r\n          This visualization shows movement patterns across New York City.\r\n          Each particle represents people moving from an origin to a destination,\r\n          with color indicating the transportation mode. The density of particles\r\n          reflects the volume of movement along each route.\r\n        </p>\r\n        <p>\r\n          Use the controls to filter by time period, time of day, transportation type,\r\n          and borough to explore how urban movement changed before, during, and after COVID-19.\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UrbanFlowParticles;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}