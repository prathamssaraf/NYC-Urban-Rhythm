{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prath\\\\Desktop\\\\infoviz\\\\project\\\\src\\\\visualizations\\\\UrbanPulse.js\",\n  _s = $RefreshSig$();\n// src/visualizations/UrbanPulse.js\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { csv, json } from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UrbanPulse = () => {\n  _s();\n  const mountRef = useRef(null);\n  const [dataLoaded, setDataLoaded] = useState(false);\n  const [timeMode, setTimeMode] = useState('daily'); // 'daily', 'weekly', 'period'\n  const [period, setPeriod] = useState('current'); // 'pre-covid', 'covid', 'recovery', 'current'\n  const [showTaxi, setShowTaxi] = useState(true);\n  const [showSubway, setShowSubway] = useState(true);\n  const [show311, setShow311] = useState(true);\n  useEffect(() => {\n    // Scene setup\n    const width = mountRef.current.clientWidth;\n    const height = mountRef.current.clientHeight;\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x111111);\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    camera.position.set(0, 20, 20);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(width, height);\n    renderer.shadowMap.enabled = true;\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Add lighting\n    const ambientLight = new THREE.AmbientLight(0x404040);\n    scene.add(ambientLight);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(1, 1, 1);\n    directionalLight.castShadow = true;\n    scene.add(directionalLight);\n\n    // Add controls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n\n    // Add grid helper for NYC map reference\n    const gridHelper = new THREE.GridHelper(40, 40);\n    scene.add(gridHelper);\n\n    // Add NYC borough outlines (simplified)\n    const addBoroughOutlines = async () => {\n      try {\n        // You would load actual GeoJSON data for NYC boroughs\n        // This is a placeholder for demonstration\n        const geoData = await json('/api/nyc-boroughs.json');\n\n        // Convert GeoJSON to THREE.js shapes\n        // For each borough, create lines along the border\n        const boroughMaterial = new THREE.LineBasicMaterial({\n          color: 0x444444\n        });\n        geoData.features.forEach(feature => {\n          const borough = feature.properties.borough;\n          const coordinates = feature.geometry.coordinates[0];\n          const points = coordinates.map(coord => {\n            // Convert lat/long to x,y coordinates (simplified)\n            // In a real implementation, you would use proper projection\n            const x = (coord[0] - -74.0) * 20; // Simplified projection\n            const z = (coord[1] - 40.7) * 20;\n            return new THREE.Vector3(x, 0.1, z);\n          });\n          const geometry = new THREE.BufferGeometry().setFromPoints(points);\n          const line = new THREE.Line(geometry, boroughMaterial);\n          scene.add(line);\n        });\n      } catch (error) {\n        console.error(\"Error loading borough data:\", error);\n      }\n    };\n\n    // Function to load and visualize data\n    const loadData = async () => {\n      try {\n        // This would be replaced with actual API calls to your backend\n        const taxiData = await json('/api/taxi-density-data');\n        const subwayData = await json('/api/subway-density-data');\n        const calls311Data = await json('/api/311-density-data');\n\n        // Process and filter data based on time mode and period\n        const processedTaxiData = processDataByTimeAndPeriod(taxiData, timeMode, period);\n        const processedSubwayData = processDataByTimeAndPeriod(subwayData, timeMode, period);\n        const processed311Data = processDataByTimeAndPeriod(calls311Data, timeMode, period);\n\n        // Create 3D visualization\n        createDensityColumns(processedTaxiData, processedSubwayData, processed311Data);\n        setDataLoaded(true);\n      } catch (error) {\n        console.error(\"Error loading data:\", error);\n      }\n    };\n\n    // Helper function to process data by time and period\n    const processDataByTimeAndPeriod = (data, timeMode, period) => {\n      // Filter by selected period\n      let filteredData = [...data]; // Copy data\n\n      switch (period) {\n        case 'pre-covid':\n          filteredData = data.filter(d => new Date(d.datetime) < new Date('2020-03-01'));\n          break;\n        case 'covid':\n          filteredData = data.filter(d => {\n            const date = new Date(d.datetime);\n            return date >= new Date('2020-03-01') && date <= new Date('2021-06-01');\n          });\n          break;\n        case 'recovery':\n          filteredData = data.filter(d => {\n            const date = new Date(d.datetime);\n            return date > new Date('2021-06-01') && date <= new Date('2022-12-31');\n          });\n          break;\n        case 'current':\n          filteredData = data.filter(d => new Date(d.datetime) > new Date('2023-01-01'));\n          break;\n      }\n\n      // Aggregate by time mode\n      let aggregatedData = [];\n      switch (timeMode) {\n        case 'daily':\n          // Group by hour of day and location\n          // This is a simplified example; in a real implementation, you'd aggregate by grid cell\n          aggregatedData = aggregateByHourAndLocation(filteredData);\n          break;\n        case 'weekly':\n          // Group by day of week and location\n          aggregatedData = aggregateByDayOfWeekAndLocation(filteredData);\n          break;\n        default:\n          aggregatedData = filteredData;\n      }\n      return aggregatedData;\n    };\n\n    // Simplified aggregation functions (would be more complex in real implementation)\n    const aggregateByHourAndLocation = data => {\n      // Group data by hour and grid cell\n      const groupedData = {};\n      data.forEach(d => {\n        const hour = new Date(d.datetime).getHours();\n        const cellKey = `${Math.round(d.x)}-${Math.round(d.y)}`;\n        const key = `${hour}-${cellKey}`;\n        if (!groupedData[key]) {\n          groupedData[key] = {\n            hour,\n            x: d.x,\n            y: d.y,\n            count: 0\n          };\n        }\n        groupedData[key].count += d.count;\n      });\n      return Object.values(groupedData);\n    };\n    const aggregateByDayOfWeekAndLocation = data => {\n      // Group data by day of week and grid cell\n      const groupedData = {};\n      data.forEach(d => {\n        const dayOfWeek = new Date(d.datetime).getDay();\n        const cellKey = `${Math.round(d.x)}-${Math.round(d.y)}`;\n        const key = `${dayOfWeek}-${cellKey}`;\n        if (!groupedData[key]) {\n          groupedData[key] = {\n            dayOfWeek,\n            x: d.x,\n            y: d.y,\n            count: 0\n          };\n        }\n        groupedData[key].count += d.count;\n      });\n      return Object.values(groupedData);\n    };\n\n    // Function to create 3D columns based on data density\n    const createDensityColumns = (taxiData, subwayData, calls311Data) => {\n      // Clear existing columns\n      scene.children = scene.children.filter(child => !(child.userData && child.userData.type === 'densityColumn'));\n\n      // Function to create a single column\n      const createColumn = (x, z, height, color) => {\n        const geometry = new THREE.BoxGeometry(0.4, height, 0.4);\n        const material = new THREE.MeshStandardMaterial({\n          color,\n          transparent: true,\n          opacity: 0.7,\n          emissive: color,\n          emissiveIntensity: 0.2\n        });\n        const column = new THREE.Mesh(geometry, material);\n        column.position.set(x, height / 2, z);\n        column.userData = {\n          type: 'densityColumn'\n        };\n        column.castShadow = true;\n        column.receiveShadow = true;\n        return column;\n      };\n\n      // Find the maximum count to normalize heights\n      const maxTaxiCount = Math.max(...taxiData.map(d => d.count), 1);\n      const maxSubwayCount = Math.max(...subwayData.map(d => d.count), 1);\n      const max311Count = Math.max(...calls311Data.map(d => d.count), 1);\n\n      // Add taxi density columns (orange)\n      if (showTaxi) {\n        taxiData.forEach(d => {\n          const height = d.count / maxTaxiCount * 10; // Normalize height to max of 10 units\n          if (height > 0.1) {\n            // Only show significant values\n            const column = createColumn(d.x, d.y, height, 0xff7700);\n            scene.add(column);\n          }\n        });\n      }\n\n      // Add subway density columns (blue)\n      if (showSubway) {\n        subwayData.forEach(d => {\n          const height = d.count / maxSubwayCount * 10;\n          if (height > 0.1) {\n            const column = createColumn(d.x, d.y, height, 0x0077ff);\n            scene.add(column);\n          }\n        });\n      }\n\n      // Add 311 call density columns (green)\n      if (show311) {\n        calls311Data.forEach(d => {\n          const height = d.count / max311Count * 10;\n          if (height > 0.1) {\n            const column = createColumn(d.x, d.y, height, 0x00ff77);\n            scene.add(column);\n          }\n        });\n      }\n    };\n\n    // Animation loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update();\n      renderer.render(scene, camera);\n    };\n\n    // Initialize\n    addBoroughOutlines();\n    loadData();\n    animate();\n\n    // Handle window resize\n    const handleResize = () => {\n      const width = mountRef.current.clientWidth;\n      const height = mountRef.current.clientHeight;\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      mountRef.current.removeChild(renderer.domElement);\n    };\n  }, [timeMode, period, showTaxi, showSubway, show311]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"urban-pulse-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"time-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Time Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: timeMode === 'daily' ? 'active' : '',\n            onClick: () => setTimeMode('daily'),\n            children: \"Daily Patterns\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: timeMode === 'weekly' ? 'active' : '',\n            onClick: () => setTimeMode('weekly'),\n            children: \"Weekly Patterns\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Period\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: period === 'pre-covid' ? 'active' : '',\n            onClick: () => setPeriod('pre-covid'),\n            children: \"Pre-COVID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: period === 'covid' ? 'active' : '',\n            onClick: () => setPeriod('covid'),\n            children: \"During COVID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: period === 'recovery' ? 'active' : '',\n            onClick: () => setPeriod('recovery'),\n            children: \"Recovery\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: period === 'current' ? 'active' : '',\n            onClick: () => setPeriod('current'),\n            children: \"Current\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"data-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Data Layers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: showTaxi,\n            onChange: () => setShowTaxi(!showTaxi)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 13\n          }, this), \"Taxi Trips\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: showSubway,\n            onChange: () => setShowSubway(!showSubway)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 13\n          }, this), \"Subway Ridership\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: show311,\n            onChange: () => setShow311(!show311)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 13\n          }, this), \"311 Calls\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mountRef,\n      className: \"visualization-container\",\n      style: {\n        width: '100%',\n        height: 'calc(100vh - 200px)',\n        minHeight: '500px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"legend\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"color-box\",\n          style: {\n            backgroundColor: '#ff7700'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Taxi Trips\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"color-box\",\n          style: {\n            backgroundColor: '#0077ff'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Subway Ridership\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"color-box\",\n          style: {\n            backgroundColor: '#00ff77'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"311 Calls\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 297,\n    columnNumber: 5\n  }, this);\n};\n_s(UrbanPulse, \"A5ON7/eH2UmgWASANvXShJyK+po=\");\n_c = UrbanPulse;\nexport default UrbanPulse;\nvar _c;\n$RefreshReg$(_c, \"UrbanPulse\");","map":{"version":3,"names":["React","useEffect","useRef","useState","THREE","OrbitControls","csv","json","jsxDEV","_jsxDEV","UrbanPulse","_s","mountRef","dataLoaded","setDataLoaded","timeMode","setTimeMode","period","setPeriod","showTaxi","setShowTaxi","showSubway","setShowSubway","show311","setShow311","width","current","clientWidth","height","clientHeight","scene","Scene","background","Color","camera","PerspectiveCamera","position","set","renderer","WebGLRenderer","antialias","setSize","shadowMap","enabled","appendChild","domElement","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","castShadow","controls","enableDamping","dampingFactor","gridHelper","GridHelper","addBoroughOutlines","geoData","boroughMaterial","LineBasicMaterial","color","features","forEach","feature","borough","properties","coordinates","geometry","points","map","coord","x","z","Vector3","BufferGeometry","setFromPoints","line","Line","error","console","loadData","taxiData","subwayData","calls311Data","processedTaxiData","processDataByTimeAndPeriod","processedSubwayData","processed311Data","createDensityColumns","data","filteredData","filter","d","Date","datetime","date","aggregatedData","aggregateByHourAndLocation","aggregateByDayOfWeekAndLocation","groupedData","hour","getHours","cellKey","Math","round","y","key","count","Object","values","dayOfWeek","getDay","children","child","userData","type","createColumn","BoxGeometry","material","MeshStandardMaterial","transparent","opacity","emissive","emissiveIntensity","column","Mesh","receiveShadow","maxTaxiCount","max","maxSubwayCount","max311Count","animate","requestAnimationFrame","update","render","handleResize","aspect","updateProjectionMatrix","window","addEventListener","removeEventListener","removeChild","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","checked","onChange","ref","style","minHeight","backgroundColor","_c","$RefreshReg$"],"sources":["C:/Users/prath/Desktop/infoviz/project/src/visualizations/UrbanPulse.js"],"sourcesContent":["// src/visualizations/UrbanPulse.js\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\nimport { csv, json } from 'd3';\r\n\r\nconst UrbanPulse = () => {\r\n  const mountRef = useRef(null);\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [timeMode, setTimeMode] = useState('daily'); // 'daily', 'weekly', 'period'\r\n  const [period, setPeriod] = useState('current'); // 'pre-covid', 'covid', 'recovery', 'current'\r\n  const [showTaxi, setShowTaxi] = useState(true);\r\n  const [showSubway, setShowSubway] = useState(true);\r\n  const [show311, setShow311] = useState(true);\r\n  \r\n  useEffect(() => {\r\n    // Scene setup\r\n    const width = mountRef.current.clientWidth;\r\n    const height = mountRef.current.clientHeight;\r\n    \r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(0x111111);\r\n    \r\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\r\n    camera.position.set(0, 20, 20);\r\n    \r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setSize(width, height);\r\n    renderer.shadowMap.enabled = true;\r\n    mountRef.current.appendChild(renderer.domElement);\r\n    \r\n    // Add lighting\r\n    const ambientLight = new THREE.AmbientLight(0x404040);\r\n    scene.add(ambientLight);\r\n    \r\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\r\n    directionalLight.position.set(1, 1, 1);\r\n    directionalLight.castShadow = true;\r\n    scene.add(directionalLight);\r\n    \r\n    // Add controls\r\n    const controls = new OrbitControls(camera, renderer.domElement);\r\n    controls.enableDamping = true;\r\n    controls.dampingFactor = 0.05;\r\n    \r\n    // Add grid helper for NYC map reference\r\n    const gridHelper = new THREE.GridHelper(40, 40);\r\n    scene.add(gridHelper);\r\n    \r\n    // Add NYC borough outlines (simplified)\r\n    const addBoroughOutlines = async () => {\r\n      try {\r\n        // You would load actual GeoJSON data for NYC boroughs\r\n        // This is a placeholder for demonstration\r\n        const geoData = await json('/api/nyc-boroughs.json');\r\n        \r\n        // Convert GeoJSON to THREE.js shapes\r\n        // For each borough, create lines along the border\r\n        const boroughMaterial = new THREE.LineBasicMaterial({ color: 0x444444 });\r\n        \r\n        geoData.features.forEach(feature => {\r\n          const borough = feature.properties.borough;\r\n          const coordinates = feature.geometry.coordinates[0];\r\n          \r\n          const points = coordinates.map(coord => {\r\n            // Convert lat/long to x,y coordinates (simplified)\r\n            // In a real implementation, you would use proper projection\r\n            const x = (coord[0] - (-74.0)) * 20; // Simplified projection\r\n            const z = (coord[1] - 40.7) * 20;\r\n            return new THREE.Vector3(x, 0.1, z);\r\n          });\r\n          \r\n          const geometry = new THREE.BufferGeometry().setFromPoints(points);\r\n          const line = new THREE.Line(geometry, boroughMaterial);\r\n          scene.add(line);\r\n        });\r\n      } catch (error) {\r\n        console.error(\"Error loading borough data:\", error);\r\n      }\r\n    };\r\n    \r\n    // Function to load and visualize data\r\n    const loadData = async () => {\r\n      try {\r\n        // This would be replaced with actual API calls to your backend\r\n        const taxiData = await json('/api/taxi-density-data');\r\n        const subwayData = await json('/api/subway-density-data');\r\n        const calls311Data = await json('/api/311-density-data');\r\n        \r\n        // Process and filter data based on time mode and period\r\n        const processedTaxiData = processDataByTimeAndPeriod(taxiData, timeMode, period);\r\n        const processedSubwayData = processDataByTimeAndPeriod(subwayData, timeMode, period);\r\n        const processed311Data = processDataByTimeAndPeriod(calls311Data, timeMode, period);\r\n        \r\n        // Create 3D visualization\r\n        createDensityColumns(processedTaxiData, processedSubwayData, processed311Data);\r\n        \r\n        setDataLoaded(true);\r\n      } catch (error) {\r\n        console.error(\"Error loading data:\", error);\r\n      }\r\n    };\r\n    \r\n    // Helper function to process data by time and period\r\n    const processDataByTimeAndPeriod = (data, timeMode, period) => {\r\n      // Filter by selected period\r\n      let filteredData = [...data]; // Copy data\r\n      \r\n      switch(period) {\r\n        case 'pre-covid':\r\n          filteredData = data.filter(d => new Date(d.datetime) < new Date('2020-03-01'));\r\n          break;\r\n        case 'covid':\r\n          filteredData = data.filter(d => {\r\n            const date = new Date(d.datetime);\r\n            return date >= new Date('2020-03-01') && date <= new Date('2021-06-01');\r\n          });\r\n          break;\r\n        case 'recovery':\r\n          filteredData = data.filter(d => {\r\n            const date = new Date(d.datetime);\r\n            return date > new Date('2021-06-01') && date <= new Date('2022-12-31');\r\n          });\r\n          break;\r\n        case 'current':\r\n          filteredData = data.filter(d => new Date(d.datetime) > new Date('2023-01-01'));\r\n          break;\r\n      }\r\n      \r\n      // Aggregate by time mode\r\n      let aggregatedData = [];\r\n      \r\n      switch(timeMode) {\r\n        case 'daily':\r\n          // Group by hour of day and location\r\n          // This is a simplified example; in a real implementation, you'd aggregate by grid cell\r\n          aggregatedData = aggregateByHourAndLocation(filteredData);\r\n          break;\r\n        case 'weekly':\r\n          // Group by day of week and location\r\n          aggregatedData = aggregateByDayOfWeekAndLocation(filteredData);\r\n          break;\r\n        default:\r\n          aggregatedData = filteredData;\r\n      }\r\n      \r\n      return aggregatedData;\r\n    };\r\n    \r\n    // Simplified aggregation functions (would be more complex in real implementation)\r\n    const aggregateByHourAndLocation = (data) => {\r\n      // Group data by hour and grid cell\r\n      const groupedData = {};\r\n      \r\n      data.forEach(d => {\r\n        const hour = new Date(d.datetime).getHours();\r\n        const cellKey = `${Math.round(d.x)}-${Math.round(d.y)}`;\r\n        const key = `${hour}-${cellKey}`;\r\n        \r\n        if (!groupedData[key]) {\r\n          groupedData[key] = {\r\n            hour,\r\n            x: d.x,\r\n            y: d.y,\r\n            count: 0\r\n          };\r\n        }\r\n        \r\n        groupedData[key].count += d.count;\r\n      });\r\n      \r\n      return Object.values(groupedData);\r\n    };\r\n    \r\n    const aggregateByDayOfWeekAndLocation = (data) => {\r\n      // Group data by day of week and grid cell\r\n      const groupedData = {};\r\n      \r\n      data.forEach(d => {\r\n        const dayOfWeek = new Date(d.datetime).getDay();\r\n        const cellKey = `${Math.round(d.x)}-${Math.round(d.y)}`;\r\n        const key = `${dayOfWeek}-${cellKey}`;\r\n        \r\n        if (!groupedData[key]) {\r\n          groupedData[key] = {\r\n            dayOfWeek,\r\n            x: d.x,\r\n            y: d.y,\r\n            count: 0\r\n          };\r\n        }\r\n        \r\n        groupedData[key].count += d.count;\r\n      });\r\n      \r\n      return Object.values(groupedData);\r\n    };\r\n    \r\n    // Function to create 3D columns based on data density\r\n    const createDensityColumns = (taxiData, subwayData, calls311Data) => {\r\n      // Clear existing columns\r\n      scene.children = scene.children.filter(child => \r\n        !(child.userData && child.userData.type === 'densityColumn')\r\n      );\r\n      \r\n      // Function to create a single column\r\n      const createColumn = (x, z, height, color) => {\r\n        const geometry = new THREE.BoxGeometry(0.4, height, 0.4);\r\n        const material = new THREE.MeshStandardMaterial({ \r\n          color, \r\n          transparent: true,\r\n          opacity: 0.7,\r\n          emissive: color,\r\n          emissiveIntensity: 0.2\r\n        });\r\n        \r\n        const column = new THREE.Mesh(geometry, material);\r\n        column.position.set(x, height / 2, z);\r\n        column.userData = { type: 'densityColumn' };\r\n        column.castShadow = true;\r\n        column.receiveShadow = true;\r\n        \r\n        return column;\r\n      };\r\n      \r\n      // Find the maximum count to normalize heights\r\n      const maxTaxiCount = Math.max(...taxiData.map(d => d.count), 1);\r\n      const maxSubwayCount = Math.max(...subwayData.map(d => d.count), 1);\r\n      const max311Count = Math.max(...calls311Data.map(d => d.count), 1);\r\n      \r\n      // Add taxi density columns (orange)\r\n      if (showTaxi) {\r\n        taxiData.forEach(d => {\r\n          const height = (d.count / maxTaxiCount) * 10; // Normalize height to max of 10 units\r\n          if (height > 0.1) { // Only show significant values\r\n            const column = createColumn(d.x, d.y, height, 0xff7700);\r\n            scene.add(column);\r\n          }\r\n        });\r\n      }\r\n      \r\n      // Add subway density columns (blue)\r\n      if (showSubway) {\r\n        subwayData.forEach(d => {\r\n          const height = (d.count / maxSubwayCount) * 10;\r\n          if (height > 0.1) {\r\n            const column = createColumn(d.x, d.y, height, 0x0077ff);\r\n            scene.add(column);\r\n          }\r\n        });\r\n      }\r\n      \r\n      // Add 311 call density columns (green)\r\n      if (show311) {\r\n        calls311Data.forEach(d => {\r\n          const height = (d.count / max311Count) * 10;\r\n          if (height > 0.1) {\r\n            const column = createColumn(d.x, d.y, height, 0x00ff77);\r\n            scene.add(column);\r\n          }\r\n        });\r\n      }\r\n    };\r\n    \r\n    // Animation loop\r\n    const animate = () => {\r\n      requestAnimationFrame(animate);\r\n      controls.update();\r\n      renderer.render(scene, camera);\r\n    };\r\n    \r\n    // Initialize\r\n    addBoroughOutlines();\r\n    loadData();\r\n    animate();\r\n    \r\n    // Handle window resize\r\n    const handleResize = () => {\r\n      const width = mountRef.current.clientWidth;\r\n      const height = mountRef.current.clientHeight;\r\n      \r\n      camera.aspect = width / height;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(width, height);\r\n    };\r\n    \r\n    window.addEventListener('resize', handleResize);\r\n    \r\n    // Cleanup\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n      mountRef.current.removeChild(renderer.domElement);\r\n    };\r\n  }, [timeMode, period, showTaxi, showSubway, show311]);\r\n  \r\n  return (\r\n    <div className=\"urban-pulse-container\">\r\n      <div className=\"controls\">\r\n        <div className=\"time-controls\">\r\n          <h3>Time Mode</h3>\r\n          <div className=\"button-group\">\r\n            <button \r\n              className={timeMode === 'daily' ? 'active' : ''} \r\n              onClick={() => setTimeMode('daily')}\r\n            >\r\n              Daily Patterns\r\n            </button>\r\n            <button \r\n              className={timeMode === 'weekly' ? 'active' : ''} \r\n              onClick={() => setTimeMode('weekly')}\r\n            >\r\n              Weekly Patterns\r\n            </button>\r\n          </div>\r\n          \r\n          <h3>Period</h3>\r\n          <div className=\"button-group\">\r\n            <button \r\n              className={period === 'pre-covid' ? 'active' : ''} \r\n              onClick={() => setPeriod('pre-covid')}\r\n            >\r\n              Pre-COVID\r\n            </button>\r\n            <button \r\n              className={period === 'covid' ? 'active' : ''} \r\n              onClick={() => setPeriod('covid')}\r\n            >\r\n              During COVID\r\n            </button>\r\n            <button \r\n              className={period === 'recovery' ? 'active' : ''} \r\n              onClick={() => setPeriod('recovery')}\r\n            >\r\n              Recovery\r\n            </button>\r\n            <button \r\n              className={period === 'current' ? 'active' : ''} \r\n              onClick={() => setPeriod('current')}\r\n            >\r\n              Current\r\n            </button>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"data-controls\">\r\n          <h3>Data Layers</h3>\r\n          <label>\r\n            <input \r\n              type=\"checkbox\" \r\n              checked={showTaxi} \r\n              onChange={() => setShowTaxi(!showTaxi)} \r\n            />\r\n            Taxi Trips\r\n          </label>\r\n          <label>\r\n            <input \r\n              type=\"checkbox\" \r\n              checked={showSubway} \r\n              onChange={() => setShowSubway(!showSubway)} \r\n            />\r\n            Subway Ridership\r\n          </label>\r\n          <label>\r\n            <input \r\n              type=\"checkbox\" \r\n              checked={show311} \r\n              onChange={() => setShow311(!show311)} \r\n            />\r\n            311 Calls\r\n          </label>\r\n        </div>\r\n      </div>\r\n      \r\n      <div \r\n        ref={mountRef} \r\n        className=\"visualization-container\" \r\n        style={{ width: '100%', height: 'calc(100vh - 200px)', minHeight: '500px' }}\r\n      />\r\n      \r\n      <div className=\"legend\">\r\n        <div className=\"legend-item\">\r\n          <div className=\"color-box\" style={{ backgroundColor: '#ff7700' }}></div>\r\n          <span>Taxi Trips</span>\r\n        </div>\r\n        <div className=\"legend-item\">\r\n          <div className=\"color-box\" style={{ backgroundColor: '#0077ff' }}></div>\r\n          <span>Subway Ridership</span>\r\n        </div>\r\n        <div className=\"legend-item\">\r\n          <div className=\"color-box\" style={{ backgroundColor: '#00ff77' }}></div>\r\n          <span>311 Calls</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UrbanPulse;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}